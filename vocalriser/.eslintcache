[{"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js":"1","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js":"3","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js":"4","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js":"5","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js":"6","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js":"7","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js":"8","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js":"9","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js":"10","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js":"11","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js":"12","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js":"13","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js":"14","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js":"15","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js":"16","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js":"17","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js":"18","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js":"19","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js":"20","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js":"21","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js":"22","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js":"23","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js":"24","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js":"25","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js":"26","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js":"27","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js":"28","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js":"29","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js":"30","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js":"31","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js":"32","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js":"33","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js":"34","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js":"35","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js":"36","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js":"37","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js":"38","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js":"39","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js":"40","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js":"41","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js":"42","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js":"43","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\index.js":"44","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\CreateJob.js":"45","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\common.helper.js":"46","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\index.js":"47","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\GigCenter.js":"48","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\index.js":"49","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\AwardedGig.js":"50","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\index.js":"51","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\Messages.js":"52","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\messages.helper.js":"53","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\notifications.helper.js":"54","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\index.js":"55","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\Settings.js":"56","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\about\\index.js":"57","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\about\\About.js":"58","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\help\\index.js":"59","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\help\\Help.js":"60","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\privacy\\index.js":"61","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\privacy\\Privacy.js":"62","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\terms\\index.js":"63","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\fees\\index.js":"64","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\terms\\Terms.js":"65","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\fees\\Fees.js":"66"},{"size":571,"mtime":1613031758352,"results":"67","hashOfConfig":"68"},{"size":375,"mtime":1613031758353,"results":"69","hashOfConfig":"68"},{"size":3861,"mtime":1613044992874,"results":"70","hashOfConfig":"68"},{"size":106,"mtime":1613031758320,"results":"71","hashOfConfig":"68"},{"size":673,"mtime":1613328633155,"results":"72","hashOfConfig":"68"},{"size":1612,"mtime":1613031758353,"results":"73","hashOfConfig":"68"},{"size":3509,"mtime":1613031758259,"results":"74","hashOfConfig":"68"},{"size":49,"mtime":1613031758259,"results":"75","hashOfConfig":"68"},{"size":46,"mtime":1613031758258,"results":"76","hashOfConfig":"68"},{"size":4066,"mtime":1613043102226,"results":"77","hashOfConfig":"68"},{"size":58,"mtime":1613031758267,"results":"78","hashOfConfig":"68"},{"size":5575,"mtime":1613031758266,"results":"79","hashOfConfig":"68"},{"size":2953,"mtime":1613031758254,"results":"80","hashOfConfig":"68"},{"size":52,"mtime":1613031758253,"results":"81","hashOfConfig":"68"},{"size":5139,"mtime":1613588259233,"results":"82","hashOfConfig":"68"},{"size":52,"mtime":1613031758251,"results":"83","hashOfConfig":"68"},{"size":1679,"mtime":1613322905669,"results":"84","hashOfConfig":"68"},{"size":61,"mtime":1613031758318,"results":"85","hashOfConfig":"68"},{"size":7751,"mtime":1613215395422,"results":"86","hashOfConfig":"68"},{"size":61,"mtime":1613031758264,"results":"87","hashOfConfig":"68"},{"size":7692,"mtime":1613215380575,"results":"88","hashOfConfig":"68"},{"size":46,"mtime":1613031758246,"results":"89","hashOfConfig":"68"},{"size":7920,"mtime":1613031758245,"results":"90","hashOfConfig":"68"},{"size":170,"mtime":1615988721006,"results":"91","hashOfConfig":"68"},{"size":1326,"mtime":1613031758256,"results":"92","hashOfConfig":"68"},{"size":58,"mtime":1613031758320,"results":"93","hashOfConfig":"68"},{"size":2657,"mtime":1613031758319,"results":"94","hashOfConfig":"68"},{"size":2280,"mtime":1613031758317,"results":"95","hashOfConfig":"68"},{"size":712,"mtime":1613031758256,"results":"96","hashOfConfig":"68"},{"size":2388,"mtime":1613031758264,"results":"97","hashOfConfig":"68"},{"size":55,"mtime":1613031758266,"results":"98","hashOfConfig":"68"},{"size":14033,"mtime":1613031758265,"results":"99","hashOfConfig":"68"},{"size":57,"mtime":1613031758262,"results":"100","hashOfConfig":"68"},{"size":1157,"mtime":1613031758262,"results":"101","hashOfConfig":"68"},{"size":67,"mtime":1613031758250,"results":"102","hashOfConfig":"68"},{"size":8750,"mtime":1613031758249,"results":"103","hashOfConfig":"68"},{"size":1355,"mtime":1613031758256,"results":"104","hashOfConfig":"68"},{"size":10681,"mtime":1613042103594,"results":"105","hashOfConfig":"68"},{"size":1788,"mtime":1613031758245,"results":"106","hashOfConfig":"68"},{"size":55,"mtime":1613031758249,"results":"107","hashOfConfig":"68"},{"size":14985,"mtime":1613587929173,"results":"108","hashOfConfig":"68"},{"size":55,"mtime":1613031758261,"results":"109","hashOfConfig":"68"},{"size":1074,"mtime":1613031758261,"results":"110","hashOfConfig":"68"},{"size":61,"mtime":1613031758248,"results":"111","hashOfConfig":"68"},{"size":11695,"mtime":1613031758247,"results":"112","hashOfConfig":"68"},{"size":897,"mtime":1613031758254,"results":"113","hashOfConfig":"68"},{"size":61,"mtime":1613031758252,"results":"114","hashOfConfig":"68"},{"size":12766,"mtime":1613031758252,"results":"115","hashOfConfig":"68"},{"size":64,"mtime":1613031758246,"results":"116","hashOfConfig":"68"},{"size":6673,"mtime":1613031758246,"results":"117","hashOfConfig":"68"},{"size":58,"mtime":1613031758260,"results":"118","hashOfConfig":"68"},{"size":7350,"mtime":1613045727288,"results":"119","hashOfConfig":"68"},{"size":3412,"mtime":1613031758255,"results":"120","hashOfConfig":"68"},{"size":2011,"mtime":1613031758255,"results":"121","hashOfConfig":"68"},{"size":58,"mtime":1613031758268,"results":"122","hashOfConfig":"68"},{"size":773,"mtime":1613045133454,"results":"123","hashOfConfig":"68"},{"size":49,"mtime":1613043213084,"results":"124","hashOfConfig":"68"},{"size":1091,"mtime":1613044455399,"results":"125","hashOfConfig":"68"},{"size":46,"mtime":1613044793450,"results":"126","hashOfConfig":"68"},{"size":111,"mtime":1613044780152,"results":"127","hashOfConfig":"68"},{"size":55,"mtime":1613044671039,"results":"128","hashOfConfig":"68"},{"size":123,"mtime":1613044661423,"results":"129","hashOfConfig":"68"},{"size":49,"mtime":1613044728712,"results":"130","hashOfConfig":"68"},{"size":46,"mtime":1613044590552,"results":"131","hashOfConfig":"68"},{"size":115,"mtime":1613044718341,"results":"132","hashOfConfig":"68"},{"size":107,"mtime":1613044603082,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"1mrrwg8",{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"136"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"136"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"136"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"136"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"136"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"136"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"136"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"136"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js",[],["277","278"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js",["279"],"import React, { useContext, useState } from 'react'\r\nimport Login from './components/login'\r\nimport Home from './components/home'\r\nimport Register from './components/register'\r\nimport Vocalists from './components/vocalists'\r\nimport Header from './components/header'\r\nimport Footer from './components/footer'\r\nimport Producers from './components/producers'\r\nimport Jobs from './components/Jobs'\r\nimport Profile from './components/profile'\r\nimport EachProfile from './components/eachprofile'\r\nimport EachGig from './components/eachgig'\r\nimport NoMatch from './components/nomatch'\r\nimport CreateJob from './components/createjob'\r\nimport GigCenter from './components/gigcenter'\r\nimport AwardedGig from './components/awardedgig'\r\nimport Messages from './components/messages'\r\nimport UserContext from './contexts/user.context'\r\nimport Settings from './components/settings'\r\nimport About from './components//about'\r\nimport Help from './components/help'\r\nimport Privacy from './components/privacy'\r\nimport Terms from './components/terms'\r\nimport Fees from './components/fees'\r\n\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route, Switch\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [user, dispatch] = useContext(UserContext)\r\n  const [path, setPath] = useState()\r\n\r\n  const locationChange = (nav) => {\r\n\r\n    let location = /[^/]*$/.exec(window.location.href)[0]\r\n\r\n    if (location === nav) {\r\n      window.location.reload()\r\n    } else {\r\n      // window.location = `/${nav}`\r\n      setPath(nav)\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const handleNotificaitonTab = () => {\r\n    dispatch({\r\n      type: \"NOTIFICATIONSTABfalse\"\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n\r\n      <Router>\r\n        <Header locationChange={locationChange} path={path} />\r\n\r\n        <div onClick={handleNotificaitonTab} className=\"body-container\">\r\n          <Switch>\r\n            <Route exact path=\"/awardedgigs/:id\" component={AwardedGig} />\r\n            <Route exact path=\"/profiles/:id\" component={EachProfile} />\r\n            <Route exact path=\"/gigs/:id\" component={EachGig} />\r\n            <Route exact path=\"/messages\">\r\n              <Messages />\r\n            </Route>\r\n\r\n            <Route exact path=\"/createjob\">\r\n              <CreateJob />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <Login />\r\n            </Route>\r\n            <Route exact path=\"/home\">\r\n              <Home />\r\n            </Route>\r\n            <Route exact path=\"/gigcenter\">\r\n              <GigCenter />\r\n            </Route>\r\n            <Route exact path=\"/registration\">\r\n              <Register />\r\n            </Route>\r\n            <Route exact path='/vocalists'>\r\n              <Vocalists />\r\n            </Route>\r\n            <Route exact path='/producers'>\r\n              <Producers />\r\n            </Route>\r\n            <Route exact path='/jobs'>\r\n              <Jobs />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile />\r\n            </Route>\r\n            <Route exact path=\"/settings\">\r\n              <Settings />\r\n            </Route>\r\n            <Route exact path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route exact path=\"/fees\">\r\n              <Fees />\r\n            </Route>\r\n            <Route exact path=\"/privacy\">\r\n              <Privacy />\r\n            </Route>\r\n            <Route exact path=\"/terms\">\r\n              <Terms />\r\n            </Route>\r\n            <Route exact path=\"/help\">\r\n              <Help />\r\n            </Route>\r\n            <Route component={NoMatch} />\r\n          </Switch>\r\n        </div>\r\n\r\n\r\n        <Footer locationChange={locationChange} path={path} />\r\n      </Router>\r\n\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js",["280"],"import React, { useState, useContext, useRef } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestLogin } from '../helpers/auth.helper'\r\nimport { Navigate } from 'react-router-dom';\r\nimport './Login.css'\r\n\r\n\r\n\r\nlet Login = () => {\r\n\r\n    const email = useRef()\r\n    const password = useRef()\r\n\r\n\r\n    const [error, setError] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState()\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [success, setSuccess] = useState(false)\r\n    const [signup, setSignUp] = useState(false)\r\n    const [passwordShow, setPasswordShow] = useState(false)\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            loginUser()\r\n        }\r\n    }\r\n\r\n    const loginUser = async () => {\r\n        setError(false)\r\n        setErrorMessage('')\r\n        let userEmail = email.current.value\r\n        let userPassword = password.current.value\r\n\r\n\r\n        if (userEmail !== '') {\r\n            if (userPassword !== '') {\r\n                setError(false)\r\n                let data = {\r\n                    email: userEmail,\r\n                    password: userPassword\r\n                }\r\n                let result = await requestLogin(data)\r\n                if (result.error) {\r\n                    setError(true)\r\n                    setErrorMessage(result.error)\r\n                } else {\r\n                    \r\n                    await dispatch({\r\n                        type: \"LOGIN\",\r\n                        payload: result.user\r\n                    })\r\n                    setSuccess(true)\r\n                }\r\n\r\n            } else {\r\n                setError(true)\r\n                setErrorMessage('Password can not be empty')\r\n            }\r\n        } else {\r\n            setError(true)\r\n            setErrorMessage('Email can not be empty')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const showPassword = () => {\r\n        setPasswordShow(!passwordShow)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"login-container\">\r\n\r\n            <div className=\"bp3-input-group .modifier login-general\">\r\n                <input onKeyPress={handleKeyPress} ref={email} type={\"email\"} className=\"bp3-input\" placeholder=\"Enter your email...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-envelope .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <div className=\"bp3-input-group .modifier login-general \">\r\n                <input onKeyPress={handleKeyPress} ref={password} type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Enter your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <button type=\"button\" onClick={loginUser} className={`bp3-button bp3-icon-log-in .modifier login-general ${error ? 'bp3-intent-danger' : 'bp3-intent-success'}`}>Sign in</button>\r\n\r\n            <button type=\"button\" onClick={() => setSignUp(true)} className=\"bp3-button .modifier login-general\">Sign up</button>\r\n\r\n            {error ? <p className=\"login-general login-error\"><i className=\"bp3-icon-error\"></i> {errorMessage}</p> : null}\r\n            {signup ? <Navigate push to=\"/registration\" /> : null}\r\n            {success ? <Navigate push to=\"/profile\" /> : null}\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js",["281","282"],"import React, { useState, useContext } from 'react'\r\nimport { Navigate } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getVocalists } from '../helpers/vocalists.helper'\r\nimport { getProducers } from '../helpers/producers.helper'\r\nimport { getAllActiveGigs } from '../helpers/gig.helper'\r\nimport PianoPlay from '../piano'\r\nimport icon from '../../images/home_vocalriser.png'\r\nimport pianoImage from '../../images/piano.jpg'\r\nimport scoreOne from '../../images/scoreOne.jpg'\r\nimport scoreTwo from '../../images/scoreTwo.jpg'\r\nimport './Home.css'\r\nimport useSound from 'use-sound';\r\nimport nocturne from '../songs/nocturne.mp3';\r\n\r\nconst Home = () => {\r\n    const [play, { pause }] = useSound(nocturne);\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [start, setStart] = useState(true)\r\n    const [oneTime, setOneTime] = useState(0)\r\n    const [statistics, setStatistics] = useState({})\r\n\r\n\r\n    const scrollBar = React.createRef()\r\n\r\n\r\n\r\n    const handleScroll = () => {\r\n        const scrollY = window.scrollY //Don't get confused by what's scrolling - It's not the window\r\n        const scrollTop = scrollBar.current.scrollTop\r\n\r\n\r\n        if (localStorage.getItem('homeSound') === 'true') {\r\n            if (scrollTop > 100) {\r\n                if (oneTime === 0) {\r\n                    play()\r\n                    setOneTime(1)\r\n                }\r\n            } else {\r\n                pause()\r\n                setOneTime(0)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getStatistics = async (token) => {\r\n        const vocalists = await getVocalists(token)\r\n        const producers = await getProducers(token)\r\n        const activeJobs = await getAllActiveGigs(token)\r\n\r\n\r\n        const statistics = {\r\n            vocalists: vocalists.length,\r\n            producers: producers.length,\r\n            activeJobs: activeJobs.length\r\n        }\r\n        setStatistics(statistics)\r\n    }\r\n\r\n    const checkCurrentUser = async () => {\r\n\r\n        const result = await requestCurrentUser(user.token)\r\n        getStatistics(user.token)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n        setStart(false)\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Navigate push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else if (!user.user.hasOwnProperty('id')) {\r\n        return (\r\n            <Navigate push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div className=\"home-container\" ref={scrollBar} onScroll={handleScroll} style={{ textAlign: 'center' }} >\r\n\r\n                <div className=\"home-icon\">\r\n                    <img src={icon} alt=\"icon\" />\r\n                    <div className=\"bp3-navbar-group bp3-align-center\">\r\n                        <button className=\"bp3-button bp3-minimal\">Vocalists: {statistics.vocalists ? statistics.vocalists : '...'}</button>\r\n                        <span className=\"bp3-navbar-divider\"></span>\r\n                        <button className=\"bp3-button bp3-minimal\">Producers: {statistics.producers ? statistics.producers : '...'}</button>\r\n                    </div>\r\n                    <div className=\"bp3-navbar-group bp3-align-center\">\r\n                        <button className=\"bp3-button bp3-minimal\">Jobs: {statistics.activeJobs ? statistics.activeJobs : '...'}</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <img id=\"pageOne\" alt=\"pageOne\" src={scoreOne} />\r\n                <img id=\"pageTwo\" alt=\"pageTwo\" src={scoreTwo} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Home","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js",["283","284","285","286","287"],"import React, { useContext, useState } from 'react';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport './Header.css'\r\nimport { getNotifications } from '../helpers/notifications.helper'\r\nimport {Link} from 'react-router-dom'\r\n\r\n//const icon = require('../../images/vocalriser.png')\r\nimport icon from '../../images/vocalriser.png'\r\n\r\nlet notify = true\r\n\r\nexport default function Header(props) {\r\n\r\n\r\n\r\n  const [user, dispatch] = useContext(UserContext)\r\n  const [logoutUser, setLogout] = useState(false)\r\n\r\n\r\n\r\n  const handleNotifications = async () => {\r\n    let currentUser = await requestCurrentUser(user.token)\r\n    let result = await getNotifications(currentUser.data.id, user.token)\r\n\r\n    if (result) {\r\n      await dispatch({\r\n        type: \"NOTIFICATIONS\",\r\n        payload: result\r\n      })\r\n    }\r\n  }\r\n\r\n  if (notify) {\r\n\r\n    handleNotifications()\r\n    notify = false\r\n  } else {\r\n    notify = false\r\n  }\r\n\r\nconst handleNotificationTab = () => {\r\n  console.log(`NOTIFICATIONSTAB${!user.notificationtab}`)\r\n  dispatch({\r\n    type: `NOTIFICATIONSTAB${!user.notificationtab}`\r\n  })\r\n}\r\n\r\n\r\n\r\n  const logout = async () => {\r\n    await dispatch({\r\n      type: \"LOGOUT\"\r\n    })\r\n    setLogout(true)\r\n  }\r\n\r\n  return (\r\n    <div >\r\n\r\n      <nav className=\"bp3-navbar bp3-dark\" style={{backgroundColor:user.theme}}>\r\n        <div >\r\n          <div className=\"bp3-navbar-group bp3-align-left\">\r\n            <img style={{ width: \"15%\" }} src={icon} />\r\n          </div>\r\n          <div className=\"bp3-navbar-group bp3-align-right header-menu\">\r\n            <button onClick={() => props.locationChange('home')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Home</button>\r\n            <button onClick={() => props.locationChange('gigcenter')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Gig Center</button>\r\n            <button onClick={() => props.locationChange('vocalists')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Vocalists</button>\r\n            <button onClick={() => props.locationChange('producers')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Producers</button>\r\n            <button onClick={() => props.locationChange('jobs')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}} >Jobs</button>\r\n            <span className=\"bp3-navbar-divider\"></span>\r\n            <button onClick={() => props.locationChange('createjob')} className=\"bp3-button bp3-minimal bp3-icon-new-object\" style={{color:user.textColor}}>Create Job</button>\r\n\r\n            <span className=\"bp3-navbar-divider\"></span>\r\n\r\n            <button onClick={() => props.locationChange('profile')} title=\"profile\" className=\"bp3-button bp3-minimal bp3-icon-user\" style={{color:user.textColor}}></button>\r\n            <div className=\"notification\">\r\n              {user.notifications.length > 0 ? <span className=\"badge\">{user.notifications.length}</span> : null}\r\n              <button onClick={handleNotificationTab} className=\"bp3-button bp3-minimal bp3-icon-notifications\" title=\"notifications\"></button>\r\n\r\n            </div>\r\n\r\n            <button onClick={() => props.locationChange('settings')} className=\"bp3-button bp3-minimal bp3-icon-cog\"></button>\r\n\r\n            <button onClick={() => props.locationChange(`messages`)} className={`bp3-button bp3-minimal bp3-icon-inbox-update bp3-intent-${user.notifications.find(e => e.type === \"message\") ? 'success' : 'no'}`} title=\"inbox\"> </button>\r\n\r\n            <button onClick={logout} className=\"bp3-button bp3-minimal bp3-icon-log-out\" title=\"logout\"></button>\r\n          </div>\r\n\r\n        </div>\r\n      </nav>\r\n\r\n      {\r\n        user.notificationtab ?\r\n          <div className=\"header-notification\">\r\n\r\n            <ul className=\"bp3-menu .modifier bp3-elevation-1\">\r\n\r\n              {user.notifications.length > 0 ? user.notifications.map((n, index) => {\r\n\r\n               switch(n.type) {\r\n                 case 'message':\r\n                  return <li key={index}>\r\n                    <a className=\"bp3-menu-item bp3-icon-inbox\" tabIndex=\"0\">received a message...</a>\r\n                  </li>\r\n                  case 'acceptGig':\r\n                  return <li key={index}>\r\n                  <a className=\"bp3-menu-item bp3-icon-inbox\" tabIndex=\"0\">User accepted <Link to={`/awardedgigs/${n.gigID}`}>gig</Link></a>\r\n                  </li>\r\n                  case 'awardGig':\r\n                  return <li key={index}>\r\n                  <a className=\"bp3-menu-item bp3-icon-inbox\" tabIndex=\"0\">You awarded for gig <Link to={`/awardedgigs/${n.gigID}`}></Link></a>\r\n                  </li>\r\n                 default:\r\n                 // \r\n               }\r\n                \r\n      \r\n              }) : 'no notification'}\r\n\r\n\r\n\r\n            </ul>\r\n          </div> : <div className=\"header-notification\">\r\n\r\n          </div>\r\n      }\r\n      { props.path ? <Navigate push to={`/${props.path}`} /> : null}\r\n      {logoutUser ? <Navigate push to=\"/\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js",["288"],"import React, {useContext} from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\n\r\nimport './Footer.css'\r\n\r\n\r\nexport default function Footer(props) {\r\n\r\n  const [user, dispatch] = useContext(UserContext)\r\n  return (\r\n\r\n    <nav className=\"bp3-navbar bp3-dark footer-container\" style={{backgroundColor:user.theme}}>\r\n   \r\n      <div className=\"bp3-navbar-group\" style={{marginLeft:'15%'}} >\r\n      <span style={{marginRight:'25%',color:user.textColor}} >© Copyright VocalRiser {new Date().getFullYear()}</span>\r\n      <span className=\"bp3-navbar-divider\"></span>\r\n        <button onClick={() => props.locationChange('help')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Help</button>\r\n        <span className=\"bp3-navbar-divider\"></span>\r\n        <button onClick={() => props.locationChange('terms')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Terms</button>\r\n        <span className=\"bp3-navbar-divider\"></span>\r\n        <button onClick={() => props.locationChange('privacy')} className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Privacy</button>\r\n        <span className=\"bp3-navbar-divider\"></span>\r\n        <button onClick={() => props.locationChange('fees')}className=\"bp3-button bp3-minimal\" style={{color:user.textColor}}>Fees & Charges</button>\r\n        <span className=\"bp3-navbar-divider\"></span>\r\n        <button onClick={() => props.locationChange('about')} className=\"bp3-button bp3-minimal\"style={{color:user.textColor}} >About</button>\r\n      </div>\r\n      { props.path ? <Navigate push to={`/${props.path}`} /> : null}\r\n    </nav>\r\n\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js",["289"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport WaveSurfer from \"wavesurfer.js\";\r\n\r\nimport './Waveform.css'\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\nconst formWaveSurferOptions = ref => ({\r\n  container: ref,\r\n  waveColor: \"#eee\",\r\n  progressColor: \"OrangeRed\",\r\n  cursorColor: \"OrangeRed\",\r\n  barWidth: 4,\r\n  barRadius: 3,\r\n  responsive: true,\r\n  height: 120,\r\n  // If true, normalize by the maximum peak instead of 1.0.\r\n  normalize: true,\r\n  // Use the PeakCache to improve rendering speed of large waveforms.\r\n  partialRender: true\r\n});\r\n\r\nexport default function Waveform({ url,title }) {\r\n  const waveformRef = useRef(null);\r\n  var wavesurfer = useRef(null);\r\n  const [playing, setPlay] = useState(false);\r\n  const [volume, setVolume] = useState(0.5);\r\n\r\n  // create new WaveSurfer instance\r\n  // On component mount and when url changes\r\n  useEffect(() => {\r\n    setPlay(false);\r\n\r\n    const options = formWaveSurferOptions(waveformRef.current);\r\n    wavesurfer.current = WaveSurfer.create(options);\r\n    wavesurfer.current.load(url);\r\n\r\n    wavesurfer.current.on(\"ready\", function () {\r\n      // https://wavesurfer-js.org/docs/methods.html\r\n      // wavesurfer.current.play();\r\n      // setPlay(true);\r\n\r\n      // make sure object stillavailable when file loaded\r\n      if (wavesurfer.current) {\r\n        wavesurfer.current.setVolume(volume);\r\n        setVolume(volume);\r\n      }\r\n    });\r\n    // Removes events, elements and disconnects Web Audio nodes.\r\n    // when component unmount\r\n    return () => wavesurfer.current.destroy();\r\n  }, [url]);\r\n\r\n  const handlePlayPause = () => {\r\n    setPlay(!playing);\r\n    wavesurfer.current.playPause();\r\n  };\r\n\r\n\r\n  const onVolumeChange = e => {\r\n    const { target } = e;\r\n    const newVolume = +target.value;\r\n\r\n    if (newVolume) {\r\n      setVolume(newVolume);\r\n      wavesurfer.current.setVolume(newVolume || 1);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n    <h5 className=\"bp3-heading\">{title}</h5>\r\n      <div id=\"waveform\" ref={waveformRef} />\r\n      <div className=\"controls\">\r\n      <button onClick={handlePlayPause} type=\"button\" className={`bp3-button ${!playing ? \"bp3-icon-play\" : \"bp3-icon-pause\"}`}></button>\r\n      \r\n    <input \r\n      className=\"controls-volume\"\r\n      type=\"range\"\r\n      id=\"volume\"\r\n      name=\"volume\"\r\n      // waveSurfer recognize value of `0` same as `1`\r\n      //  so we need to set some zero-ish value for silence\r\n      min=\"0.01\"\r\n      max=\"1\"\r\n      step=\".025\"\r\n      onChange={onVolumeChange}\r\n      defaultValue={volume}\r\n    />\r\n    \r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js",["290","291"],"import React, { useContext, useState, useRef } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getUserByID } from '../helpers/profile.helper'\r\nimport { createMessage, sendMessage } from '../helpers/messages.helper'\r\nimport { createNotification } from '../helpers/notifications.helper'\r\nimport { Navigate } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\n\r\nconst EachProfile = (props) => {\r\n\r\n    const messageInput = useRef()\r\n\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [selected, setSelected] = useState('video')\r\n    let [section, setSection] = useState()\r\n    let [viewUser, setViewUser] = useState({})\r\n    const [message, setMessage] = useState()\r\n    const [start,setStart] = useState(true)\r\n\r\n\r\n    const handlSendMessage = async (e) => {\r\n        e.preventDefault()\r\n        \r\n\r\n        let data = {\r\n            sender: user.user.id,\r\n            sender_fullname: `${user.user.first_name} ${user.user.last_name}`,\r\n            reciever: viewUser.id,\r\n            reciever_fullname: `${viewUser.first_name} ${viewUser.last_name}`,\r\n            message: messageInput.current.value\r\n        }\r\n        let result = await createMessage(data, user.token)\r\n\r\n        if (result.hasOwnProperty(\"id\")) {\r\n            setMessage(false)\r\n            let notification = {\r\n                type: \"message\",\r\n                fromUser: user.user.id,\r\n                toUser: viewUser.id,\r\n                messageID: result.id\r\n            }\r\n            let notify = await createNotification(notification, user.token)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const checkCurrentUser = async () => {\r\n\r\n        const result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n      \r\n            let viewedUser = await getUserByID(props.match.params.id, user.token)\r\n       \r\n            if (viewedUser) {\r\n                setViewUser(viewedUser)\r\n            \r\n                setLogin('success')\r\n            } else {\r\n                setLogin('failed')\r\n            }\r\n\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n       setStart(false)\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Navigate push to=\"/\" />\r\n\r\n        )\r\n    }\r\n\r\n    else if (!viewUser.hasOwnProperty('id')) {\r\n       props.history.goBack()\r\n        return (\r\n            <p></p>\r\n        )\r\n    }\r\n    else {\r\n       \r\n\r\n        return (\r\n            <div className=\"profile-section\">\r\n                <div onMouseEnter={() => setSection(1)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 1 ? '4' : '2'} .modifier profile-section-one`}>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <img alt=\"user\" style={{ width: '100px' }} src={viewUser.image} />\r\n\r\n                    </div>\r\n\r\n                    <h1 className=\"bp3-heading profile-section-one-each\">{viewUser.first_name} {viewUser.last_name}</h1>\r\n                    {viewUser.id !== user.user.id? <button onClick={() => setMessage(true)} className=\"bp3-button\">message</button>:null}\r\n\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.age}</span>\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.gender}</span>\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        Sounds like: {viewUser.soundslike.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Microphones: {viewUser.microphone.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Genres: {viewUser.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Country: <span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewUser.country}</span>\r\n                    City: <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{viewUser.city}</span>\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                   \r\n                        Raiting: {viewUser.raiting === null  ? <span className=\"bp3-tag\">No reviews yet</span> : <span\r\n                            className={`bp3-tag bp3-intent-${parseFloat(viewUser.raiting) <= 3 ? 'danger' :\r\n                                parseFloat(viewUser.raiting) > 4 ? 'success' : 'warning'}`}>{viewUser.raiting}</span>}\r\n                    </div>\r\n                </div>\r\n                <div onMouseEnter={() => setSection(2)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 2 ? '4' : '2'} .modifier profile-section-two`}>\r\n                    <div className=\"profile-section-two-each\">\r\n                        <Waveform url={viewUser.track_url} title={viewUser.track_title} />\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-two-each\">\r\n                        <span className=\"bp3-tag\">About</span> {viewUser.about}\r\n                    </div>\r\n\r\n                    <div className=\"bp3-tabs profile-section-two-each\">\r\n                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                            <li onClick={() => setSelected('video')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'video' ? true : false}>Video</li>\r\n                            <li onClick={() => setSelected('review')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'review' ? true : false}>Reviews</li>\r\n                            <li onClick={() => setSelected('connection')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'connection' ? true : false}>Connections</li>\r\n                        </ul>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'video' ? false : true}>\r\n                            <iframe title=\"video\" width=\"560\" height=\"315\" src={viewUser.youtube_link} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                        </div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'review' ? false : true}>Reviews</div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'connection' ? false : true}>Connections</div>\r\n                    </div>\r\n                </div>\r\n\r\n                {message ? <div className=\"bp3-dialog-container\">\r\n                    <div className=\"bp3-dialog\">\r\n                        <div className=\"bp3-dialog-header\">\r\n                            <span className=\"bp3-icon-large bp3-icon-inbox\"></span>\r\n                            <h4 className=\"bp3-heading\">Message</h4>\r\n                            <button aria-label=\"Close\" className=\"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross\"></button>\r\n                        </div>\r\n                        <div className=\"bp3-dialog-body\">\r\n                            <form onSubmit={handlSendMessage}>\r\n                                <input ref={messageInput} type=\"text\" className=\"bp3-input\" required minLength={1} />\r\n                                <button onClick={() => setMessage(false)} type=\"button\" className=\"bp3-button\">close</button>\r\n                                <button type=\"submit\" className=\"bp3-button bp3-intent-primary\">Send</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div> : null}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default EachProfile","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js",["292","293"],"import React, { useContext, useState } from 'react'\r\nimport UserContext from '../../contexts/user.context'\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getGigByID, getGigBiddings, removeBid, submitBid, closeGigByID, awardGigByID, getBidExist } from '../helpers/gig.helper'\r\nimport {createNotification} from '../helpers/notifications.helper'\r\nimport { Navigate } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\nimport './EachGig.css'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport Utils from '../utils/common.utils'\r\n\r\n\r\nconst EachGig = (props) => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [viewedGig, setViewGig] = useState()\r\n    const [bidError, setBidError] = useState('')\r\n    const [bidExist, setBidExist] = useState(false)\r\n    const [biddings, setBiddings] = useState([])\r\n    const [userBid, setUserBid] = useState()\r\n    const bidRef = React.createRef()\r\n    const [selected, setSelected] = useState('genres')\r\n    const [start,setStart] = useState(true)\r\n\r\n\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const handleBid = async () => {\r\n\r\n        setBidError('')\r\n        if (bidRef.current.value > viewedGig.budgetMax) {\r\n            setBidError('max')\r\n        } else if (bidRef.current.value < viewedGig.budgetMin) {\r\n            setBidError('min')\r\n        } else {\r\n        \r\n            setBidError('')\r\n            let refresh = await handleRefreshBid()\r\n            let bidExist = await getBidExist({\r\n                user_id: user.user.id,\r\n                gig_id: viewedGig.id\r\n            }, user.token)\r\n\r\n            if (bidExist) {\r\n             \r\n                setBiddings(refresh)\r\n            } else {\r\n           \r\n                let bid = {\r\n                    gig_id: viewedGig.id,\r\n                    user_id: user.user.id,\r\n                    amount: bidRef.current.value,\r\n                    full_name: `${user.user.first_name} ${user.user.last_name}`,\r\n                    track_url: user.user.track_url,\r\n                    track_title: user.user.track_title,\r\n                    soundslike: user.user.soundslike\r\n                }\r\n\r\n                let result = await submitBid(bid, user.token)\r\n\r\n                let notification = {\r\n                    type: \"bidGig\",\r\n                    fromUser: user.user.id,\r\n                    toUser:viewedGig.user_id,\r\n                    gigID:viewedGig.id\r\n                }\r\n                let notify = await createNotification(notification, user.token) \r\n\r\n\r\n                if (result) {\r\n                    window.location.reload(true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleRefreshGig = async () => {\r\n        let result = false;\r\n        let viewedGig = await getGigByID(props.match.params.id, user.token)\r\n        if (viewedGig) {\r\n            result = viewedGig\r\n        }\r\n        return result\r\n    }\r\n\r\n    const closeGig = async () => {\r\n        let refresh = await handleRefreshGig()\r\n        if (refresh) {\r\n            if (refresh.active === 0) {\r\n                setViewGig(refresh)\r\n            } else {\r\n\r\n                let result = await closeGigByID(viewedGig.id, user.token)\r\n                if (result) {\r\n                    let updatedGig = { ...viewedGig, active: 0 }\r\n                    setViewGig(updatedGig)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const awardGig = async (user_id) => {\r\n        let refresh = await handleRefreshGig()\r\n        if (refresh) {\r\n            if (viewedGig.active === 2) {\r\n     \r\n \r\n                setViewGig(refresh)\r\n           \r\n        \r\n            } else {\r\n\r\n                let result = await awardGigByID(viewedGig.id, user_id, user.token)\r\n                if (result) {\r\n               \r\n                    let updatedGig = { ...viewedGig, active: 2, awardedUser: user_id }\r\n\r\n                    let notification = {\r\n                        type: \"awardGig\",\r\n                        fromUser: viewedGig.user_id,\r\n                        toUser:user_id,\r\n                        gigID:viewedGig.id\r\n                    }\r\n                    let notify = await createNotification(notification, user.token)     \r\n\r\n                    setViewGig(updatedGig)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleRefreshBid = async () => {\r\n        let result = false;\r\n        let biddings = await getGigBiddings(props.match.params.id, user.token)\r\n        if (biddings) {\r\n            result = biddings\r\n        }\r\n        return result\r\n\r\n    }\r\n\r\n\r\n\r\n    const handleRemove = async (bid) => {\r\n        let refresh = await handleRefreshBid()\r\n        let data = {\r\n            user_id:bid.user_id,\r\n            gig_id:viewedGig.id\r\n        }\r\n\r\n        \r\n        let bidExist = await getBidExist(data, user.token)\r\n        \r\n        if (refresh) {\r\n            if (bidExist) {\r\n                if (bid.user_id === user.user.id) {\r\n                  \r\n                    let result = await removeBid(bid.id, user.token)\r\n                    if (result) {\r\n                        window.location.reload()\r\n                    }\r\n                }\r\n\r\n            } else {\r\n              \r\n                setBiddings(refresh)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const checkCurrentUser = async () => {\r\n        setBidExist(false)\r\n       \r\n        const result = await requestCurrentUser(user.token)\r\n    \r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n          \r\n            let viewedGig = await getGigByID(props.match.params.id, user.token)\r\n            let biddings = await getGigBiddings(props.match.params.id, user.token)\r\n          \r\n\r\n           \r\n            if (viewedGig) {\r\n                setViewGig(viewedGig)\r\n                setBiddings(biddings)\r\n                let userBid = false;\r\n                \r\n                if (biddings.length > 0) {\r\n                    userBid = biddings.find(x => x.user_id === result.data.id)\r\n                }\r\n                if (userBid) {\r\n                    setBidExist(true)\r\n                    setUserBid(userBid)\r\n                } else {\r\n                    setBidExist(false)\r\n                }\r\n                setLogin('success')\r\n            } else {\r\n                setLogin('waiting')\r\n            }\r\n\r\n        } else {\r\n            setLogin('failed')\r\n\r\n        }\r\n    }\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n        setStart(false)\r\n    }\r\n\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Navigate push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    else if (!viewedGig.hasOwnProperty('id')) {\r\n        return (\r\n            <Navigate push to=\"/jobs\" />\r\n        )\r\n    }\r\n    else {\r\n\r\n        return (\r\n            <div className=\"gig-container\">\r\n                <div className=\"bp3-card each-gig-container\">\r\n                    <div className=\"each-gig-element\">\r\n                        <h1 className=\"bp3-heading\">{viewedGig.name}</h1>\r\n                        <span className={`bp3-tag bp3-intent-${viewedGig.active === 1 ? 'warning' : viewedGig.active === 2 ? 'success' : 'danger'}`}>\r\n                            {viewedGig.active === 1 ? 'active' : viewedGig.active === 2 ? 'Awarded' : 'Closed'}</span>\r\n\r\n                    </div>\r\n                    {viewedGig.active === 1 ? <button onClick={closeGig} style={{ width: \"10%\" }} className=\"bp3-button bp3-intent-danger bp3-outlined bp3-small\">Close</button> : null}\r\n                    <div className=\"each-gig-element\">\r\n                        <Waveform url={viewedGig.track_url} title={viewedGig.name} />\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Created date:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{new Date(viewedGig.createDate).toLocaleDateString(\"sq-AL\", { year: 'numeric', month: '2-digit', day: '2-digit' })}</span>\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Looking for:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.type === 'V' ? 'vocalist' : 'producer'}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Language:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.language}</span>\r\n                    Genre:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.genre}</span>\r\n                    BPM:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.bpm}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Created by:<Link to={`/profiles/${viewedGig.user_id}`}><span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }}\r\n                            className=\"bp3-tag .modifier\">{viewedGig.createdBy}</span></Link>\r\n                    Budget:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className={`bp3-tag .modifier bp3-intent-${bidError === 'min' ? 'danger' : 'success'}`}>{viewedGig.budgetMin}</span>\r\n                    -<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className={`bp3-tag .modifier bp3-intent-${bidError === 'max' ? 'danger' : 'success'}`}>{viewedGig.budgetMax}</span>{Utils.currency}\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Requirements:<p></p><span style={{ marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.requirements}</span>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"bp3-card bid-area\">\r\n\r\n                    {bidExist ? <div>\r\n                        Your bid is: <span className=\"bp3-tag\">{userBid.amount}</span>\r\n                    </div> : viewedGig.user_id === user.user.id || viewedGig.active !== 1 ? null : <div>\r\n                        <input ref={bidRef} className=\"bp3-input bp3-intent-primary bp3-large  .modifier\" type=\"number\" placeholder=\"Your bid\" dir=\"auto\" />\r\n                        <button onClick={handleBid} style={{ marginLeft: '1%' }} type=\"button\" className=\"bp3-button bp3-intent-success bp3-large .modifier\">Submit</button>\r\n                    </div>}\r\n                </div>\r\n\r\n                <div className=\"bp3-card bid-area\">\r\n                    {biddings.length > 0 ? biddings.map((bid, index) => <div key={index}>\r\n                        <blockquote className=\"bp3-blockquote each-bid bp3-card bp3-interactive\" >\r\n\r\n\r\n                            <div className=\"each-bid-element\">\r\n                                <div style={{ textAlign: 'center' }}> <span className=\"bp3-tag \" >{bid.amount} {Utils.currency}</span></div>\r\n                                <img alt=\"user\" style={{ width: '100px', padding: \"5%\" }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                                {viewedGig.awardedUser === user.user.id ? <div style={{ marginTop: '7%', textAlign: \"center\" }}><span className={`bp3-tag bp3-intent-success`}>Successfull bid</span></div> : null}\r\n                                {bidExist && bid.user_id === user.user.id && viewedGig.user_id !== user.user.id && viewedGig.active === 1 ? <div style={{ textAlign: \"center\" }}><button onClick={() => handleRemove(bid)} className=\"bp3-button bp3-intent-danger remove-bid\">remove Bid</button></div> : null}\r\n                                {viewedGig.user_id === user.user.id && viewedGig.active === 1 ? <div style={{ textAlign: \"center\" }}><button onClick={() => awardGig(bid.user_id)} className=\"bp3-button bp3-intent-success remove-bid\">Award Gig</button></div> : null}\r\n                            </div>\r\n                            <div className=\"each-bid-element\" style={{ width: '250px' }}>\r\n                                <NavLink to={`/profiles/${bid.user_id}`}> <h1 className=\"bp3-heading\">{bid.full_name} </h1></NavLink>\r\n\r\n                                <div className=\"bp3-tabs\">\r\n                                    <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                        <li onClick={() => panelSelect('genres')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'genres' ? true : false}>Genres</li>\r\n                                        <li onClick={() => panelSelect('microphones')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'microphones' ? true : false}>Microphone</li>\r\n                                        <li onClick={() => panelSelect('soundslike')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'soundslike' ? true : false}>Sounds like</li>\r\n                                    </ul>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'genres' ? false : true}>\r\n                                        {bid.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                                    </div>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'microphones' ? false : true}>\r\n                                        {bid.microphone.split(',').map((m, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{m}</span>)}\r\n                                    </div>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'soundslike' ? false : true}>\r\n                                        {bid.soundslike.split(',').map((s, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{s}</span>)}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"each-bid-element\" style={{ marginTop: '0%' }}>\r\n                                <Waveform url={bid.track_url} title={bid.track_title} className=\"bid-waveform\" />\r\n\r\n                            </div>\r\n                            <div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </blockquote>\r\n                    </div>) : null}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default EachGig","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\CreateJob.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\common.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\GigCenter.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\AwardedGig.js",["294"],"import React, { useContext, useState } from 'react'\r\nimport UserContext from '../../contexts/user.context'\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getGigByID, getPreparedContract, acceptGig, sendContract } from '../helpers/gig.helper'\r\nimport { createNotification } from '../helpers/notifications.helper'\r\nimport { Navigate } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\n\r\nconst AwardedGig = (props) => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [viewedGig, setViewGig] = useState()\r\n    const [contract, setContract] = useState('')\r\n    const [start, setStart] = useState(true)\r\n\r\n\r\n    const handleAcceptGig = async () => {\r\n        const result = await acceptGig(viewedGig.id, user.token)\r\n        if (result) {\r\n\r\n            let notification = {\r\n                type: \"acceptGig\",\r\n                fromUser: user.user.id,\r\n                toUser: viewedGig.user_id,\r\n                gigID: viewedGig.id\r\n            }\r\n            let notify = await createNotification(notification, user.token)\r\n\r\n\r\n\r\n            setViewGig({ ...viewedGig, progress: 1 })\r\n            sendContract({\r\n                user_id: viewedGig.user_id,\r\n                awardedUser: viewedGig.awardedUser,\r\n                contract\r\n            }, user.token)\r\n        }\r\n    }\r\n\r\n\r\n    const checkCurrentUser = async () => {\r\n\r\n        const result = await requestCurrentUser(user.token)\r\n\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n\r\n            const viewedGig = await getGigByID(props.match.params.id, user.token)\r\n            if (viewedGig.progress === 0) {\r\n                const result = await getPreparedContract(props.match.params.id, user.token)\r\n                setContract(result.contract)\r\n            }\r\n\r\n            if (viewedGig) {\r\n                setViewGig(viewedGig)\r\n                setLogin('')\r\n            } else {\r\n                setLogin('failed')\r\n            }\r\n\r\n        } else {\r\n            setLogin('failed')\r\n\r\n        }\r\n    }\r\n\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n        setStart(false)\r\n    }\r\n\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Navigate push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    else if (!viewedGig.hasOwnProperty('id')) {\r\n        return (\r\n            <Navigate push to=\"/jobs\" />\r\n        )\r\n    }\r\n\r\n    else if (viewedGig.awardedUser === user.user.id && viewedGig.progress === 0) {\r\n        return (\r\n            <div className=\"bp3-dialog-container\">\r\n                <div className=\"bp3-dialog\">\r\n                    <div className=\"bp3-dialog-header\">\r\n                        <span className=\"bp3-icon-large bp3-icon-inbox\"></span>\r\n                        <h4 className=\"bp3-heading\">Aggrement</h4>\r\n                        <button aria-label=\"Close\" className=\"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross\"></button>\r\n                    </div>\r\n                    <div className=\"bp3-dialog-body\">\r\n                        {contract.length > 0 ? contract : null}\r\n                    </div>\r\n                    <div className=\"bp3-dialog-footer\">\r\n                        <div className=\"bp3-dialog-footer-actions\">\r\n                            <button type=\"button\" className=\"bp3-button\">Decline</button>\r\n                            <button type=\"submit\" className=\"bp3-button bp3-intent-primary\" onClick={handleAcceptGig}>Accept</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    else if (viewedGig.progress > 0) {\r\n\r\n        return (\r\n            <div className=\"gig-container\">\r\n                <div className=\"bp3-card each-gig-container\">\r\n                    <div className=\"each-gig-element\">\r\n                        <h1 className=\"bp3-heading\">{viewedGig.name}</h1>\r\n                        <span className={`bp3-tag bp3-intent-${viewedGig.active === 1 ? 'warning' : viewedGig.active === 2 ? 'success' : 'danger'}`}>\r\n                            {viewedGig.active === 1 ? 'active' : viewedGig.active === 2 ? 'Awarded' : 'Closed'}</span>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        <Waveform url={viewedGig.track_url} title={viewedGig.name} />\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Created date:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{new Date(viewedGig.createDate).toLocaleDateString(\"sq-AL\", { year: 'numeric', month: '2-digit', day: '2-digit' })}</span>\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Looking for:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.type === 'V' ? 'vocalist' : 'producer'}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Language:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.language}</span>\r\n                    Genre:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.genre}</span>\r\n                    BPM:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.bpm}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Created by:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.createdBy}</span>\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Requirements:<p></p><span style={{ marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.requirements}</span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    else if (viewedGig.awardedUser !== user.user.id && viewedGig.progress === 0) {\r\n        return (\r\n            <p>Agreement waiting for acception</p>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <Navigate push to=\"/jobs\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default AwardedGig","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\Messages.js",["295","296","297","298"],"import React, { useState, useContext, useRef } from 'react'\r\nimport { Navigate } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getEachMessages, getMessages, sendMessage, deleteMessage, createMessage } from '../helpers/messages.helper'\r\nimport { readNotification, createNotification } from '../helpers/notifications.helper'\r\nimport PianoPlay from '../piano'\r\nimport './Messages.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nlet Messages = () => {\r\n    const sendMessageInput = useRef()\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [messages, setMessages] = useState([])\r\n    const [eachMessages, setEachMessages] = useState([])\r\n    const [selectedMessage, setSelectedMessage] = useState(0)\r\n    const [start, setStart] = useState(true)\r\n\r\n\r\n    const handleNotification = async () => {\r\n       await user.notifications.map(n => {\r\n            if (n.type === \"message\") {\r\n\r\n                readNotification(n.id, user.token)\r\n          \r\n\r\n            }\r\n        })\r\n\r\n        dispatch({\r\n            type: \"NOTIFICATIONS\",\r\n            payload: user.notifications.filter(item => item.type !== 'message')\r\n        })\r\n\r\n\r\n    }\r\n\r\n    const handleDeleteMessage = async (message_id, type) => {\r\n        let data = {\r\n            id: message_id,\r\n            type\r\n        }\r\n\r\n        let result = await deleteMessage(data, user.token)\r\n\r\n        if (result) {\r\n            let messages = await getMessages(user.user.id, user.token)\r\n            if (messages) {\r\n                setMessages(messages)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleSendMessage = async (e, message_id, sender_id, sender_fullname, sender_message) => {\r\n        e.preventDefault()\r\n\r\n\r\n        let getMessagebyID = messages.find(e => e.id === message_id)\r\n        let toUser;\r\n        if (sender_id === getMessagebyID.sender) {\r\n            toUser = getMessagebyID.reciever\r\n        } else {\r\n            toUser = getMessagebyID.sender\r\n        }\r\n\r\n        let notification = {\r\n            type: \"message\",\r\n            fromUser: sender_id,\r\n            toUser,\r\n            messageID: message_id\r\n        }\r\n        let notify = await createNotification(notification, user.token)\r\n\r\n\r\n        let data = {\r\n            message_id,\r\n            sender_id,\r\n            sender_fullname,\r\n            sender_message: sendMessageInput.current.value\r\n        }\r\n\r\n        let result = await sendMessage(data, user.token)\r\n        let eachMessage = await getEachMessages(message_id, user.token)\r\n        if (result && eachMessage) {\r\n            setEachMessages(eachMessage)\r\n            sendMessageInput.current.value = \"\"\r\n        }\r\n    }\r\n\r\n    const handleEachMessages = async (message_id) => {\r\n\r\n\r\n        setSelectedMessage(message_id)\r\n\r\n        let eachMessages = await getEachMessages(message_id, user.token)\r\n\r\n        if (eachMessages) {\r\n            setEachMessages(eachMessages)\r\n        }\r\n    }\r\n\r\n    const checkCurrentUser = async () => {\r\n        handleNotification()\r\n\r\n        const result = await requestCurrentUser(user.token)\r\n\r\n\r\n        const messages = await getMessages(result.data.id, user.token)\r\n\r\n        if (result.status && messages) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            setMessages(messages.reverse())\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n        setStart(false)\r\n    }\r\n\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Navigate push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else if (!user.user.hasOwnProperty('id')) {\r\n        return (\r\n            <Navigate push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n\r\n                {messages.length > 0 ? <div className=\"message-container\">\r\n\r\n                    <div className=\"bp3-card .modifier main-message-container\">\r\n                        {messages.map((message, index) => {\r\n\r\n                            if (message.sender === user.user.id && message.sender_active === 1) {\r\n                                return <div key={index}  >\r\n\r\n\r\n\r\n                                    <button style={{ width: '89%', position: 'relative' }} className={`bp3-button bp3-outlined bp3-intent-${selectedMessage === message.id ? 'success' : null}`} onClick={() => handleEachMessages(message.id)} key={index}>{message.reciever_fullname}</button>\r\n\r\n                                    <button style={{ float: 'right' }} onClick={() => handleDeleteMessage(message.id, 'sender_active')} className=\"bp3-button bp3-minimal bp3-icon-delete bp3-intent-danger\"></button>\r\n                                </div>\r\n                            } else if (message.reciever === user.user.id && message.reciever_active === 1) {\r\n                                return <div key={index}  >\r\n\r\n                                    <button style={{ width: '89%', position: 'relative' }} className={`bp3-button bp3-outlined bp3-intent-${selectedMessage === message.id ? 'success' : null}`} onClick={() => handleEachMessages(message.id)} key={index}>{message.sender_fullname}</button>\r\n\r\n                                    <button style={{ float: 'right' }} onClick={() => handleDeleteMessage(message.id, 'sender_active')} className=\"bp3-button bp3-minimal bp3-icon-delete bp3-intent-danger\"></button>\r\n                                </div>\r\n                            }\r\n                        })}\r\n                    </div>\r\n\r\n                    {selectedMessage > 0 ? <div className=\"bp3-card .modifier each-message-container\">\r\n                        {eachMessages.length > 0 ? eachMessages.map((m, i) => <div key={i}>\r\n                            <Link to={`/profiles/${m.sender_id}`}>{m.sender_fullname}</Link>\r\n                            <p>{m.sender_message}</p>\r\n                        </div>) : 'no Messages'}\r\n                        <div style={{ marginTop: \"10%\" }}>\r\n                            <form onSubmit={(e) => handleSendMessage(e, selectedMessage, user.user.id, `${user.user.first_name} ${user.user.last_name}`)}>\r\n                                <input ref={sendMessageInput} type=\"text\" minLength={1} className=\"bp3-input\" required />\r\n                                <button style={{ marginLeft: \"1%\" }} className=\"bp3-button \">send message</button>\r\n                            </form>\r\n\r\n                        </div>\r\n\r\n                    </div> : null}\r\n\r\n\r\n                </div> : <div className=\"information-block\">\r\n                        You have not received any messages yet!\r\n                        Employers can message bidders to discuss bids and ask questions.\r\n\r\n                        This is an important part of the bidding process as it allows for questions to be\r\n                        answered before a gig is awarded.\r\n\r\n                        Keep an eye out for new messages.\r\n\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Messages","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\messages.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\notifications.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\Settings.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\about\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\about\\About.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\help\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\help\\Help.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\privacy\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\privacy\\Privacy.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\terms\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\fees\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\terms\\Terms.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\fees\\Fees.js",[],{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":39,"column":10,"nodeType":"305","messageId":"306","endLine":39,"endColumn":14},{"ruleId":"303","severity":1,"message":"304","line":17,"column":12,"nodeType":"305","messageId":"306","endLine":17,"endColumn":16},{"ruleId":"303","severity":1,"message":"307","line":10,"column":8,"nodeType":"305","messageId":"306","endLine":10,"endColumn":18},{"ruleId":"303","severity":1,"message":"308","line":31,"column":15,"nodeType":"305","messageId":"306","endLine":31,"endColumn":22},{"ruleId":"309","severity":1,"message":"310","line":65,"column":13,"nodeType":"311","endLine":65,"endColumn":56},{"ruleId":"312","severity":1,"message":"313","line":101,"column":82,"nodeType":"314","messageId":"315","endLine":101,"endColumn":84},{"ruleId":"316","severity":1,"message":"317","line":106,"column":21,"nodeType":"311","endLine":106,"endColumn":78},{"ruleId":"316","severity":1,"message":"317","line":110,"column":19,"nodeType":"311","endLine":110,"endColumn":76},{"ruleId":"316","severity":1,"message":"317","line":114,"column":19,"nodeType":"311","endLine":114,"endColumn":76},{"ruleId":"303","severity":1,"message":"318","line":10,"column":16,"nodeType":"305","messageId":"306","endLine":10,"endColumn":24},{"ruleId":"319","severity":1,"message":"320","line":52,"column":6,"nodeType":"321","endLine":52,"endColumn":11,"suggestions":"322"},{"ruleId":"303","severity":1,"message":"323","line":5,"column":25,"nodeType":"305","messageId":"306","endLine":5,"endColumn":36},{"ruleId":"303","severity":1,"message":"324","line":47,"column":17,"nodeType":"305","messageId":"306","endLine":47,"endColumn":23},{"ruleId":"303","severity":1,"message":"324","line":71,"column":21,"nodeType":"305","messageId":"306","endLine":71,"endColumn":27},{"ruleId":"303","severity":1,"message":"324","line":129,"column":25,"nodeType":"305","messageId":"306","endLine":129,"endColumn":31},{"ruleId":"303","severity":1,"message":"324","line":30,"column":17,"nodeType":"305","messageId":"306","endLine":30,"endColumn":23},{"ruleId":"303","severity":1,"message":"325","line":5,"column":68,"nodeType":"305","messageId":"306","endLine":5,"endColumn":81},{"ruleId":"312","severity":1,"message":"326","line":25,"column":39,"nodeType":"314","messageId":"327","endLine":25,"endColumn":41},{"ruleId":"303","severity":1,"message":"324","line":77,"column":13,"nodeType":"305","messageId":"306","endLine":77,"endColumn":19},{"ruleId":"312","severity":1,"message":"313","line":157,"column":56,"nodeType":"314","messageId":"315","endLine":157,"endColumn":58},"no-native-reassign",["328"],"no-negated-in-lhs",["329"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'pianoImage' is defined but never used.","'scrollY' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.","ArrayExpression",["330"],"'sendMessage' is defined but never used.","'notify' is assigned a value but never used.","'createMessage' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"331","fix":"332"},"Update the dependencies array to be: [url, volume]",{"range":"333","text":"334"},[1636,1641],"[url, volume]"]