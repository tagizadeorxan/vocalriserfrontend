[{"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js":"1","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js":"3","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js":"4","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js":"5","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js":"6","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js":"7","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js":"8","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js":"9","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js":"10","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js":"11","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js":"12","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js":"13","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js":"14","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js":"15","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js":"16","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js":"17","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js":"18","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js":"19","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js":"20","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js":"21","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js":"22","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js":"23","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js":"24","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js":"25","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js":"26","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js":"27","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js":"28","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js":"29","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js":"30","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js":"31","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js":"32","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js":"33","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js":"34","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js":"35","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js":"36","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js":"37","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js":"38","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js":"39","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js":"40","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js":"41","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js":"42","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js":"43"},{"size":457,"mtime":1610618039489,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":1606758772215,"results":"46","hashOfConfig":"45"},{"size":1794,"mtime":1611127036344,"results":"47","hashOfConfig":"45"},{"size":106,"mtime":1610539988082,"results":"48","hashOfConfig":"45"},{"size":576,"mtime":1610950650352,"results":"49","hashOfConfig":"45"},{"size":1182,"mtime":1610987015258,"results":"50","hashOfConfig":"45"},{"size":4228,"mtime":1610814551656,"results":"51","hashOfConfig":"45"},{"size":49,"mtime":1610543626405,"results":"52","hashOfConfig":"45"},{"size":46,"mtime":1610555378485,"results":"53","hashOfConfig":"45"},{"size":1099,"mtime":1611127839743,"results":"54","hashOfConfig":"45"},{"size":58,"mtime":1610564265827,"results":"55","hashOfConfig":"45"},{"size":5632,"mtime":1610814544368,"results":"56","hashOfConfig":"45"},{"size":3026,"mtime":1611071500805,"results":"57","hashOfConfig":"45"},{"size":52,"mtime":1610621487112,"results":"58","hashOfConfig":"45"},{"size":2263,"mtime":1610916437994,"results":"59","hashOfConfig":"45"},{"size":52,"mtime":1610621770240,"results":"60","hashOfConfig":"45"},{"size":205,"mtime":1610814568756,"results":"61","hashOfConfig":"45"},{"size":61,"mtime":1610627265520,"results":"62","hashOfConfig":"45"},{"size":7482,"mtime":1611089377473,"results":"63","hashOfConfig":"45"},{"size":61,"mtime":1610628721159,"results":"64","hashOfConfig":"45"},{"size":7421,"mtime":1611089364853,"results":"65","hashOfConfig":"45"},{"size":46,"mtime":1610628868193,"results":"66","hashOfConfig":"45"},{"size":6981,"mtime":1611079525838,"results":"67","hashOfConfig":"45"},{"size":170,"mtime":1611130613415,"results":"68","hashOfConfig":"45"},{"size":1326,"mtime":1610980815748,"results":"69","hashOfConfig":"45"},{"size":58,"mtime":1610739287166,"results":"70","hashOfConfig":"45"},{"size":2731,"mtime":1610742852987,"results":"71","hashOfConfig":"45"},{"size":2360,"mtime":1610814536758,"results":"72","hashOfConfig":"45"},{"size":712,"mtime":1610980803634,"results":"73","hashOfConfig":"45"},{"size":2468,"mtime":1610813967701,"results":"74","hashOfConfig":"45"},{"size":55,"mtime":1610817341355,"results":"75","hashOfConfig":"45"},{"size":5945,"mtime":1610916962133,"results":"76","hashOfConfig":"45"},{"size":57,"mtime":1610872049349,"results":"77","hashOfConfig":"45"},{"size":1164,"mtime":1610899245046,"results":"78","hashOfConfig":"45"},{"size":67,"mtime":1610892319851,"results":"79","hashOfConfig":"45"},{"size":6466,"mtime":1611089499125,"results":"80","hashOfConfig":"45"},{"size":712,"mtime":1610980824607,"results":"81","hashOfConfig":"45"},{"size":5562,"mtime":1611129123267,"results":"82","hashOfConfig":"45"},{"size":1819,"mtime":1611081080926,"results":"83","hashOfConfig":"45"},{"size":55,"mtime":1610956261556,"results":"84","hashOfConfig":"45"},{"size":14124,"mtime":1611130709745,"results":"85","hashOfConfig":"45"},{"size":55,"mtime":1611127023569,"results":"86","hashOfConfig":"45"},{"size":991,"mtime":1611130048600,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"aeoksf",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js",[],["189","190"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js",["191"],"import React, { useState, useContext, useRef } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestLogin } from '../helpers/auth.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Login.css'\r\n\r\n\r\n\r\nlet Login = () => {\r\n\r\n    const email = useRef()\r\n    const password = useRef()\r\n    const confirmPassword = useRef()\r\n\r\n    const [error, setError] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState()\r\n    const [user,dispatch] = useContext(UserContext)\r\n    const [success, setSuccess] = useState(false)\r\n    const [signup, setSignUp] = useState(false)\r\n    const [passwordShow, setPasswordShow] = useState(false)\r\n\r\n\r\n    const loginUser = async () => {\r\n        setError(false)\r\n        setErrorMessage('')\r\n        let userEmail = email.current.value\r\n        let userPassword = password.current.value\r\n        let userConfirmPassword = confirmPassword.current.value\r\n        \r\n\r\n        if (userEmail !== '') {\r\n            if (userPassword !== '' || userConfirmPassword !== '') {\r\n                if (userPassword === userConfirmPassword) {\r\n                    setError(false)\r\n                    let data = {\r\n                        email: userEmail,\r\n                        password: userPassword\r\n                    }\r\n                    let result = await requestLogin(data)\r\n                    if (result.error) {\r\n                        setError(true)\r\n                        setErrorMessage(result.error)\r\n                    } else {\r\n                        console.log(result.user)\r\n                        await dispatch({\r\n                            type: \"LOGIN\",\r\n                            payload: result.user\r\n                        })\r\n                        setSuccess(true)\r\n                    }\r\n                } else {\r\n                    setError(true)\r\n                    setErrorMessage('Password not match')\r\n                }\r\n            } else {\r\n                setError(true)\r\n                setErrorMessage('Password can not be empty')\r\n            }\r\n        } else {\r\n            setError(true)\r\n            setErrorMessage('Email can not be empty')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const showPassword = () => {\r\n        setPasswordShow(!passwordShow)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"login-container\">\r\n\r\n            <div className=\"bp3-input-group .modifier login-general\">\r\n                <input ref={email} type={\"email\"} className=\"bp3-input\" placeholder=\"Enter your email...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-envelope .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <div className=\"bp3-input-group .modifier login-general \">\r\n                <input ref={password} type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Enter your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <div className=\"bp3-input-group .modifier login-general \">\r\n                <input ref={confirmPassword} type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Enter your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n           \r\n            <button type=\"button\" onClick={loginUser} className={`bp3-button bp3-icon-log-in .modifier login-general ${error? 'bp3-intent-danger':'bp3-intent-success'}`}>Sign in</button>\r\n            \r\n            <button type=\"button\" onClick={()=>setSignUp(true)} className=\"bp3-button .modifier login-general\">Sign up</button>\r\n\r\n             {error? <p className=\"login-general login-error\"><i className=\"bp3-icon-error\"></i> {errorMessage}</p>:null}\r\n            {signup ? <Redirect push to=\"/registration\" /> : null}\r\n            {success ? <Redirect push to=\"/home\" /> : null}\r\n\r\n\r\n       \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js",["192","193"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\nlet Home = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    let checkCurrentUser = async () => {\r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300}/>\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <PianoPlay  width={1000}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Home","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js",["194","195"],"import React, {useContext} from 'react'\r\nimport Utils from '../utils/common.utils'\r\n\r\n\r\n\r\n\r\n\r\nexport let requestLogin = async (data) => {\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n    }\r\n\r\n    let result = {}\r\n\r\n    await fetch(`${Utils.url}/api/v1/users/login`, options)\r\n        .then(res => {\r\n            if (res.status === 200 || res.status === 401 || res.status === 400) {\r\n                return res.json()\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status === 400) {\r\n                result.error = res.errors[0].msg\r\n            } else if (res.status === 401) {\r\n                result.error = res.message\r\n            } else {\r\n                if(res) {\r\n                    result.user = res\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            result.error = \"Please try again later\"\r\n        })\r\n    return result\r\n}\r\n\r\nexport let requestCurrentUser = async (token) => {\r\n  \r\n    let result = {\r\n        status: false,\r\n        data:{},\r\n        errorMessage:''\r\n    }\r\n\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        method: 'GET'\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/users/whoami`, options)\r\n        .then(res => {\r\n            console.log(res)\r\n            if (res.status === 200) {\r\n                result.status = true\r\n                return res.json()\r\n            } \r\n        })\r\n        .then(res=> {\r\n            if(res) {\r\n                result.data = res\r\n            }\r\n        })\r\n        .catch(error => {\r\n            result.errorMessage = \"Please try again later\"\r\n        })\r\n\r\n    return result\r\n}\r\n\r\nexport let createUser = async (data) => {\r\n    let options = {\r\n        method:'POST',\r\n        headers: {\r\n            'Accept': 'application/json, text/plain, */*',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    }\r\n\r\n    let result = {}\r\n\r\n    await fetch(`${Utils.url}/api/v1/users`,options)\r\n        .then(res => {\r\n            console.log(res)\r\n            if (res.status === 201 || res.status === 409 || res.status === 400) {\r\n                return res.json()\r\n            } \r\n        })\r\n        .then(res => {\r\n         if(res.status === 409 ){\r\n             result.errorMessage = res.message\r\n             result.status = false\r\n         }  else if (res.status === 400) {\r\n             result.errors = res\r\n            result.errorMessage = res.message\r\n            result.code = 400\r\n            result.status = false\r\n         }\r\n         else {\r\n             result.status = true\r\n         } \r\n         \r\n        })\r\n        .catch(error => {\r\n            result.errorMessage = \"Please try again later\"\r\n        })\r\n    return result\r\n}","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js",["196"],"import React, { useContext, useState } from 'react';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Header.css'\r\n\r\n\r\nexport default function Header() {\r\n\r\n\r\n\r\n  const [user, dispatch] = useContext(UserContext)\r\n  const [logoutUser, setLogout] = useState(false)\r\n  const [path,setPath] = useState()\r\n\r\n  const locationChange = (nav) => {\r\n    \r\n    let location = /[^/]*$/.exec(window.location.href)[0]\r\n\r\n      if( location === nav) {\r\n        window.location.reload()\r\n       } else if(path === nav) {\r\n        window.location = `/${nav}`\r\n       }\r\n       else {\r\n        setPath(nav)  \r\n      }\r\n  }\r\n\r\n  const logout = async () => {\r\n    await dispatch({\r\n      type: \"LOGOUT\"\r\n    })\r\n    setLogout(true)\r\n  }\r\n\r\n  return (\r\n    <div >\r\n\r\n      <nav className=\"bp3-navbar bp3-dark\">\r\n        <div >\r\n          <div className=\"bp3-navbar-group bp3-align-left\">\r\n            <div className=\"bp3-navbar-heading\">VocalRiser</div>\r\n          </div>\r\n          <div className=\"bp3-navbar-group bp3-align-right header-menu\">\r\n            <button onClick={() => locationChange('home')} className=\"bp3-button bp3-minimal\">Home</button>\r\n            <button onClick={() => {\r\n             \r\n             locationChange('vocalists')\r\n        \r\n          \r\n         \r\n            }} className=\"bp3-button bp3-minimal\">Vocalists</button>\r\n            <button onClick={() => locationChange('producers')} className=\"bp3-button bp3-minimal\">Producers</button>\r\n            <button onClick={() => locationChange('jobs')} className=\"bp3-button bp3-minimal\">Jobs</button>\r\n\r\n            <span className=\"bp3-navbar-divider\"></span>\r\n            <button onClick={() => locationChange('profile')} className=\"bp3-button bp3-minimal bp3-icon-user\"></button>\r\n            <button className=\"bp3-button bp3-minimal bp3-icon-notifications\"></button>\r\n            <button className=\"bp3-button bp3-minimal bp3-icon-cog\"></button>\r\n            <button onClick={logout} className=\"bp3-button bp3-minimal bp3-icon-log-out\"></button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n     \r\n      { path ? <Redirect push to={`/${path}`} /> : null}\r\n      {logoutUser ? <Redirect push to=\"/\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js",["197","198"],"\r\nimport React, { useState, useContext, useEffect, useRef } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Search from './Search'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport './Vocalist.css'\r\nimport { getVocalists } from '../helpers/vocalists.helper'\r\nimport Waveform from \"../waveform\";\r\nimport PianoPlay from '../piano'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Vocalists = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [selected, setSelected] = useState('genres')\r\n    let [vocalists, setVocalists] = useState([])\r\n    let [pageSize, setPageSize] = useState(1)\r\n    let [currentPage, setCurrentPage] = useState(1)\r\n\r\n\r\n\r\n    let getVocalistsList = async () => {\r\n        let vocalistList = await getVocalists(user.token)\r\n        console.log(vocalistList)\r\n        setPageSize(Math.ceil(vocalistList.length === 0 ? (vocalistList.length + 1) / 2 : vocalistList.length / 2))\r\n        setVocalists(vocalistList)\r\n        dispatch({\r\n            type: 'VOCALISTS',\r\n            payload: vocalistList\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const changePage = (page) => {\r\n        switch (page) {\r\n            case 'prev':\r\n                setCurrentPage(currentPage - 1)\r\n                break;\r\n            case 'next':\r\n                setCurrentPage(currentPage + 1)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const setSearchData = (data) => {\r\n \r\n        setPageSize(1)\r\n        if (Object.keys(data).length === 0) {\r\n            setVocalists(user.vocalists)\r\n            setPageSize(Math.ceil(user.vocalists.length === 0 ? (user.vocalists.length + 1) / 2 : user.vocalists.length / 2))\r\n\r\n        } else {\r\n            let filterVocalists = user.vocalists.filter(v => {\r\n                for (let key in data) {\r\n                    if (!v[key].toLowerCase().includes(data[key].toLowerCase()))\r\n                        return false\r\n                }\r\n                return true\r\n            })\r\n\r\n            setVocalists(filterVocalists)\r\n            setPageSize(Math.ceil(filterVocalists.length === 0 ? filterVocalists.length + 1 / 2 : filterVocalists.length / 2))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            setLogin('success')\r\n            getVocalistsList()\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\"/>\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"vocalist-page-container\">\r\n                <Search search={setSearchData} />\r\n                <div style={{ marginLeft: '5%' }}>\r\n                    <div className=\"vocalists-container\">\r\n\r\n                        {vocalists.length > 0 ? vocalists.slice((currentPage - 1) * 2, currentPage * 2).map((vocalist, index) => <div key={index}>\r\n                            <blockquote className=\"bp3-blockquote bp3-card bp3-interactive each-vocalist\">\r\n                                <div className=\"each-vocalist-element\" style={{width:'100px'}}>\r\n                                    <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                                </div>\r\n                                <div className=\"each-vocalist-element\" style={{width:'500px'}} >\r\n                                    <Link to={`/profiles/${vocalist.id}`}> <h1 className=\"bp3-heading\">{vocalist.first_name} {vocalist.last_name} </h1></Link>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{vocalist.age}</span>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{vocalist.gender}</span>\r\n\r\n                                    <div className=\"bp3-tabs\">\r\n                                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                            <li onClick={() => panelSelect('genres')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'genres' ? true : false}>Genres</li>\r\n                                            <li onClick={() => panelSelect('microphones')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'microphones' ? true : false}>Microphone</li>\r\n                                            <li onClick={() => panelSelect('soundslike')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'soundslike' ? true : false}>Sounds like</li>\r\n                                        </ul>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'genres' ? false : true}>\r\n                                            {vocalist.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'microphones' ? false : true}>\r\n                                            {vocalist.microphone.split(',').map((m, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{m}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'soundslike' ? false : true}>\r\n                                            {vocalist.soundslike.split(',').map((s, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{s}</span>)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ marginTop: '3%'}} className=\"each-vocalist-element\">\r\n                                    {/* <button style={{marginTop:'7%',marginLeft:'10%',display:'block'}} type=\"button\" className=\"bp3-button\">Connect</button> */}\r\n\r\n\r\n                                    <Waveform url={vocalist.track_url} title={vocalist.track_title} />\r\n\r\n\r\n                                </div>\r\n\r\n                            </blockquote>\r\n                        </div>) : null}\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"pagination\">\r\n                        {/* {[...Array(pageSize)].map((p, i) => <span className=\"bp3-tag .modifier\">{i + 1}</span>)} */}\r\n\r\n                        {currentPage === 1 ? null : <span onClick={() => changePage('prev')} className=\"bp3-tag .modifier page-change\">previous page</span>}\r\n                        {currentPage === pageSize ? null : <span onClick={() => changePage('next')} className=\"bp3-tag .modifier page-change\">next page</span>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Vocalists","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js",["199"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getProducers } from '../helpers/producers.helper'\r\nimport Search from './Search'\r\nimport Waveform from \"../waveform\";\r\nimport './Producers.css'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\n\r\n\r\nconst Producers = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [producers, setProducers] = useState([])\r\n    let [pageSize, setPageSize] = useState(1)\r\n    let [currentPage, setCurrentPage] = useState(1)\r\n    const [selected, setSelected] = useState('genres')\r\n \r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n\r\n    let getProducersList = async () => {\r\n        let producersList = await getProducers(user.token)\r\n\r\n        setPageSize(Math.ceil(producersList.length === 0 ? (producersList.length + 1) / 2 : producersList.length / 2))\r\n        setProducers(producersList)\r\n        dispatch({\r\n            type: 'PRODUCERS',\r\n            payload: producersList\r\n        })\r\n    }\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const changePage = (page) => {\r\n        switch (page) {\r\n            case 'prev':\r\n                setCurrentPage(currentPage - 1)\r\n                break;\r\n            case 'next':\r\n                setCurrentPage(currentPage + 1)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const setSearchData = (data) => {\r\n\r\n        setPageSize(1)\r\n        if (Object.keys(data).length === 0) {\r\n            setProducers(user.producers)\r\n            setPageSize(Math.ceil(user.producers.length === 0 ? (user.producers.length + 1) / 2 : user.producers.length / 2))\r\n\r\n        } else {\r\n            let filterProducers = user.producers.filter(p => {\r\n                for (let key in data) {\r\n                    if (!p[key].toLowerCase().includes(data[key].toLowerCase()))\r\n                        return false\r\n                }\r\n                return true\r\n            })\r\n\r\n            setProducers(filterProducers)\r\n            setPageSize(Math.ceil(filterProducers.length === 0 ? filterProducers.length + 1 / 2 : filterProducers.length / 2))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            setLogin('success')\r\n            getProducersList()\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\"/>\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"producer-page-container\">\r\n                <Search search={setSearchData} />\r\n                <div style={{ marginLeft: '5%' }}>\r\n                    <div className=\"producers-container\">\r\n\r\n                        {producers.length > 0 ? producers.slice((currentPage - 1) * 2, currentPage * 2).map((producer, index) => <div key={index}>\r\n                            <blockquote  className=\"bp3-blockquote each-producer bp3-card bp3-interactive\">\r\n                                <div className=\"each-producer-element\" style={{width:'100px'}}>\r\n                                    <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                                </div>\r\n                                <div className=\"each-producer-element\" style={{ width: '500px' }}>\r\n                                  <NavLink to={`/profiles/${producer.id}`}> <h1 className=\"bp3-heading\">{producer.first_name} {producer.last_name} </h1></NavLink> \r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{producer.age}</span>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{producer.gender}</span>\r\n\r\n                                    <div className=\"bp3-tabs\">\r\n                                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                            <li onClick={() => panelSelect('genres')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'genres' ? true : false}>Genres</li>\r\n                                            <li onClick={() => panelSelect('microphones')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'microphones' ? true : false}>Microphone</li>\r\n                                            <li onClick={() => panelSelect('soundslike')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'soundslike' ? true : false}>Sounds like</li>\r\n                                        </ul>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'genres' ? false : true}>\r\n                                            {producer.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'microphones' ? false : true}>\r\n                                            {producer.microphone.split(',').map((m, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{m}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'soundslike' ? false : true}>\r\n                                            {producer.soundslike.split(',').map((s, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{s}</span>)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ marginTop: '3%' }} >\r\n                                    {/* <button style={{marginTop:'7%',marginLeft:'10%',display:'block'}} type=\"button\" className=\"bp3-button\">Connect</button> */}\r\n\r\n\r\n                                    <Waveform url={producer.track_url} title={producer.track_title} />\r\n\r\n\r\n                                </div>\r\n\r\n                            </blockquote>\r\n                        </div>) : null}\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"pagination\">\r\n                        {/* {[...Array(pageSize)].map((p, i) => <span className=\"bp3-tag .modifier\">{i + 1}</span>)} */}\r\n\r\n                        {currentPage === 1 ? null : <span onClick={() => changePage('prev')} className=\"bp3-tag .modifier page-change\">previous page</span>}\r\n                        {currentPage === pageSize ? null : <span onClick={() => changePage('next')} className=\"bp3-tag .modifier page-change\">next page</span>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Producers","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js",["200"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getGigs } from '../helpers/gig.helper'\r\nimport PianoPlay from '../piano'\r\nimport Search from './Search'\r\nimport Waveform from \"../waveform\";\r\nimport { Link } from 'react-router-dom'\r\nimport './Jobs.css'\r\n\r\n\r\nconst Jobs = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [gigs, setGigs] = useState([])\r\n    const [selected, setSelected] = useState('requirements')\r\n    let [pageSize, setPageSize] = useState(1)\r\n    let [currentPage, setCurrentPage] = useState(1)\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n\r\n    const setSearchData = (data) => {\r\n        setPageSize(1)\r\n        if (Object.keys(data).length === 0) {\r\n            setGigs(user.gigs)\r\n            setPageSize(Math.ceil(user.gigs.length === 0 ? (user.gigs.length + 1) / 2 : user.gigs.length / 2))\r\n\r\n        } else {\r\n            let filterJobs = user.gigs.filter(g => {\r\n                for (let key in data) {\r\n                    if (!g[key].toLowerCase().includes(data[key].toLowerCase()))\r\n                        return false\r\n                }\r\n                return true\r\n            })\r\n\r\n            setGigs(filterJobs)\r\n            setPageSize(Math.ceil(filterJobs.length === 0 ? filterJobs.length + 1 / 2 : filterJobs.length / 2))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const changePage = (page) => {\r\n        switch (page) {\r\n            case 'prev':\r\n                setCurrentPage(currentPage - 1)\r\n                break;\r\n            case 'next':\r\n                setCurrentPage(currentPage + 1)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        let result = await requestCurrentUser(user.token)\r\n        console.log(result)\r\n        if (result.status) {\r\n            console.log(result)\r\n\r\n            let gigs = await getGigs(result.data.type, result.data.gender, user.token)\r\n            setPageSize(Math.ceil(gigs.length === 0 ? (gigs.length + 1) / 2 : gigs.length / 2))\r\n            console.log(gigs)\r\n            setGigs(gigs)\r\n            dispatch({\r\n                type: \"GIGS\",\r\n                payload: gigs\r\n            })\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"job-page-container\">\r\n                <Search search={setSearchData} />\r\n                <div style={{ marginLeft: '5%' }}>\r\n                    <div className=\"jobs-container\">\r\n\r\n                        {gigs.length > 0 ? gigs.slice((currentPage - 1) * 2, currentPage * 2).map((gig, index) => <div key={index}>\r\n                            <blockquote className=\"bp3-blockquote bp3-card bp3-interactive each-job\">\r\n                                <div className=\"each-job-element\">\r\n                                    {/* <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" /> */}\r\n                                </div>\r\n                                <div className=\"each-job-element\" style={{ width: '500px' }}>\r\n                                    <Link to={`/gigs/${gig.id}`}> <h1 className=\"bp3-heading\">{gig.name}</h1></Link>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{gig.bpm}</span>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{gig.genre}</span>\r\n\r\n                                    <div className=\"bp3-tabs\">\r\n                                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                            <li onClick={() => panelSelect('requirements')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'requirements' ? true : false}>Requirements</li>\r\n                                            <li onClick={() => panelSelect('language')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'language' ? true : false}>Language</li>\r\n                                            <li onClick={() => panelSelect('budget')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'budget' ? true : false}>Budget</li>\r\n                                        </ul>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'requirements' ? false : true}>\r\n                                            <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{gig.requirements.substring(0, 30)}...</span>\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'language' ? false : true}>\r\n                                            <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{gig.language}</span>\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'budget' ? false : true}>\r\n                                            <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{gig.budgetMin}-{gig.budgetMax} USD</span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ marginTop: '3%' }} >\r\n                                    {/* <button style={{marginTop:'7%',marginLeft:'10%',display:'block'}} type=\"button\" className=\"bp3-button\">Connect</button> */}\r\n\r\n\r\n                                    <Waveform url={gig.track_url} title={gig.name} />\r\n\r\n\r\n                                </div>\r\n\r\n                            </blockquote>\r\n                        </div>) : null}\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"pagination\">\r\n                        {currentPage === 1 ? null : <span onClick={() => changePage('prev')} className=\"bp3-tag .modifier page-change\">previous page</span>}\r\n                        {currentPage === pageSize ? null : <span onClick={() => changePage('next')} className=\"bp3-tag .modifier page-change\">next page</span>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Jobs","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js",["201","202"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport WaveSurfer from \"wavesurfer.js\";\r\nimport CursorPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.cursor.min'\r\nimport './Waveform.css'\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\nconst formWaveSurferOptions = ref => ({\r\n  container: ref,\r\n  waveColor: \"#eee\",\r\n  progressColor: \"OrangeRed\",\r\n  cursorColor: \"OrangeRed\",\r\n  barWidth: 4,\r\n  barRadius: 3,\r\n  responsive: true,\r\n  height: 120,\r\n  // If true, normalize by the maximum peak instead of 1.0.\r\n  normalize: true,\r\n  // Use the PeakCache to improve rendering speed of large waveforms.\r\n  partialRender: true\r\n});\r\n\r\nexport default function Waveform({ url,title }) {\r\n  const waveformRef = useRef(null);\r\n  var wavesurfer = useRef(null);\r\n  const [playing, setPlay] = useState(false);\r\n  const [volume, setVolume] = useState(0.5);\r\n\r\n  // create new WaveSurfer instance\r\n  // On component mount and when url changes\r\n  useEffect(() => {\r\n    setPlay(false);\r\n\r\n    const options = formWaveSurferOptions(waveformRef.current);\r\n    wavesurfer.current = WaveSurfer.create(options);\r\n    wavesurfer.current.load(url);\r\n\r\n    wavesurfer.current.on(\"ready\", function () {\r\n      // https://wavesurfer-js.org/docs/methods.html\r\n      // wavesurfer.current.play();\r\n      // setPlay(true);\r\n\r\n      // make sure object stillavailable when file loaded\r\n      if (wavesurfer.current) {\r\n        wavesurfer.current.setVolume(volume);\r\n        setVolume(volume);\r\n      }\r\n    });\r\n    // Removes events, elements and disconnects Web Audio nodes.\r\n    // when component unmount\r\n    return () => wavesurfer.current.destroy();\r\n  }, [url]);\r\n\r\n  const handlePlayPause = () => {\r\n    setPlay(!playing);\r\n    wavesurfer.current.playPause();\r\n  };\r\n\r\n\r\n  const onVolumeChange = e => {\r\n    const { target } = e;\r\n    const newVolume = +target.value;\r\n\r\n    if (newVolume) {\r\n      setVolume(newVolume);\r\n      wavesurfer.current.setVolume(newVolume || 1);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n    <h5 className=\"bp3-heading\">{title}</h5>\r\n      <div id=\"waveform\" ref={waveformRef} />\r\n      <div className=\"controls\">\r\n      <button onClick={handlePlayPause} type=\"button\" className={`bp3-button ${!playing ? \"bp3-icon-play\" : \"bp3-icon-pause\"}`}></button>\r\n      \r\n    <input \r\n      className=\"controls-volume\"\r\n      type=\"range\"\r\n      id=\"volume\"\r\n      name=\"volume\"\r\n      // waveSurfer recognize value of `0` same as `1`\r\n      //  so we need to set some zero-ish value for silence\r\n      min=\"0.01\"\r\n      max=\"1\"\r\n      step=\".025\"\r\n      onChange={onVolumeChange}\r\n      defaultValue={volume}\r\n    />\r\n    \r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js",["203","204","205","206"],"import React, { useRef } from 'react'\r\nimport './Search.css'\r\n\r\n\r\nconst Search = ({ search }) => {\r\n\r\n    const soundslike = useRef()\r\n    const microphone = useRef()\r\n    const genres = useRef()\r\n    const gender = useRef()\r\n\r\n    const handleSearch = () => {\r\n        let data = {}\r\n\r\n        let result1 = (soundslike.current.value.length > 0) ? data['soundslike'] = soundslike.current.value : null\r\n        let result2 = (microphone.current.value.length > 0) ? data['microphone'] = microphone.current.value : null\r\n        let result3 = (genres.current.value.length > 0) ? data['genres'] = genres.current.value : null\r\n        let result4 = (gender.current.value.length > 0 && gender.current.value !== 'Gender...') ? data['gender'] = gender.current.value : null\r\n        search(data)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={soundslike} type=\"text\" className=\"bp3-input\" placeholder=\"Sounds like...\" />\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={microphone} type=\"text\" className=\"bp3-input\" placeholder=\"Microphone...\" />\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={genres} type=\"text\" className=\"bp3-input\" placeholder=\"Genre...\" />\r\n            </div>\r\n\r\n            <div className=\"search-container-field\">\r\n                <div className=\"bp3-select .modifier\">\r\n                    <select defaultValue=\"Gender...\" ref={gender}>\r\n                        <option >Gender...</option>\r\n                        <option value=\"M\">Male</option>\r\n                        <option value=\"F\">Female</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"search-container-field\">\r\n                <button onClick={handleSearch} type=\"button\" className=\"bp3-button bp3-icon-search .modifier\">Search</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js",["207","208","209","210"],"import React, { useRef } from 'react'\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport './Search.css'\r\n\r\n\r\nconst Search = ({ search }) => {\r\n\r\n    const soundslike = useRef()\r\n    const microphone = useRef()\r\n    const genres = useRef()\r\n    const gender = useRef()\r\n\r\n    const handleSearch = () => {\r\n        let data = {}\r\n\r\n        let result1 = (soundslike.current.value.length > 0) ? data['soundslike'] = soundslike.current.value : null\r\n        let result2 = (microphone.current.value.length > 0) ? data['microphone'] = microphone.current.value : null\r\n        let result3 = (genres.current.value.length > 0) ? data['genres'] = genres.current.value : null\r\n        let result4 = (gender.current.value.length > 0 && gender.current.value !== 'Gender...') ? data['gender'] = gender.current.value : null\r\n        search(data)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={soundslike} type=\"text\" className=\"bp3-input\" placeholder=\"Sounds like...\" />\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={microphone} type=\"text\" className=\"bp3-input\" placeholder=\"Microphone...\" />\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={genres} type=\"text\" className=\"bp3-input\" placeholder=\"Genre...\" />\r\n            </div>\r\n\r\n            <div className=\"search-container-field\">\r\n                <div className=\"bp3-select .modifier\">\r\n                    <select defaultValue=\"Gender...\" ref={gender}>\r\n                        <option >Gender...</option>\r\n                        <option value=\"M\">Male</option>\r\n                        <option value=\"F\">Female</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"search-container-field\">\r\n                <button onClick={handleSearch} type=\"button\" className=\"bp3-button bp3-icon-search .modifier\">Search</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js",["211","212"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Profile.css'\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\nconst Profile = () => {\r\n\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [selected, setSelected] = useState('video')\r\n    let [section, setSection] = useState()\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    let checkCurrentUser = async () => {\r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"profile-section\">\r\n                <div onMouseEnter={() => setSection(1)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 1 ? '4' : '2'} .modifier profile-section-one`}>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                    </div>\r\n\r\n                    <h1 className=\"bp3-heading profile-section-one-each\">{user.user.first_name} {user.user.last_name}</h1>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{user.user.age}</span>\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{user.user.gender}</span>\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        Sounds like: {user.user.soundslike.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Microphones: {user.user.microphone.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Genres: {user.user.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Country: <span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{user.user.country}</span>\r\n                    City: <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{user.user.city}</span>\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Raiting: {user.user.raiting === null ? <span className=\"bp3-tag\">No reviews yet</span> : <span\r\n                            className={`bp3-tag bp3-intent-${parseFloat(user.user.raiting) <= 3 ? 'danger' :\r\n                                parseFloat(user.user.raiting) > 4 ? 'success' : 'warning'}`}>{user.user.raiting}</span>}\r\n                    </div>\r\n                </div>\r\n                <div onMouseEnter={() => setSection(2)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 2 ? '4' : '2'} .modifier profile-section-two`}>\r\n                    <div className=\"profile-section-two-each\">\r\n                        <Waveform url={user.user.track_url} title={user.user.track_title} />\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-two-each\">\r\n                        <span className=\"bp3-tag\">About</span> {user.user.about}\r\n                    </div>\r\n\r\n                    <div className=\"bp3-tabs profile-section-two-each\">\r\n                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                            <li onClick={() => setSelected('video')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'video' ? true : false}>Video</li>\r\n                            <li onClick={() => setSelected('review')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'review' ? true : false}>Reviews</li>\r\n                            <li onClick={() => setSelected('connection')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'connection' ? true : false}>Connections</li>\r\n                        </ul>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'video' ? false : true}>\r\n                            <iframe width=\"560\" height=\"315\" src={user.user.youtube_link} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                        </div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'review' ? false : true}>Reviews</div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'connection' ? false : true}>Connections</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Profile","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js",["213","214"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport {getUserByID} from '../helpers/profile.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\nconst EachProfile = (props) => {\r\n\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [selected, setSelected] = useState('video')\r\n    let [section,setSection] = useState()\r\n    let [viewUser,setViewUser] = useState()\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    let checkCurrentUser = async () => {\r\n       \r\n\r\n        \r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            console.log(props)\r\n            let viewedUser = await getUserByID(props.match.params.id,user.token)\r\n            console.log(viewedUser)\r\n            if(viewedUser){\r\n                setViewUser(viewedUser)\r\n                setLogin('success')\r\n            } else{\r\n                setLogin('waiting')\r\n            }\r\n            \r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    \r\n    else if (!viewUser.hasOwnProperty('id')) {\r\n       props.history.goBack()\r\n        return (\r\n            <p></p>\r\n        )\r\n    }\r\n    else {\r\n      \r\n        return (\r\n            <div className=\"profile-section\">\r\n                <div onMouseEnter={()=>setSection(1)} onMouseLeave={()=>setSection(0)} className={`bp3-card bp3-elevation-${section === 1? '4':'2'} .modifier profile-section-one`}>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                    </div>\r\n\r\n                    <h1 className=\"bp3-heading profile-section-one-each\">{viewUser.first_name} {viewUser.last_name}</h1>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.age}</span>\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.gender}</span>\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        Sounds like: {viewUser.soundslike.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Microphones: {viewUser.microphone.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Genres: {viewUser.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Country: <span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewUser.country}</span>\r\n                    City: <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{viewUser.city}</span>\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Raiting: {viewUser.raiting === null ? <span className=\"bp3-tag\">No reviews yet</span> : <span\r\n                            className={`bp3-tag bp3-intent-${parseFloat(viewUser.raiting) <= 3 ? 'danger' :\r\n                                parseFloat(viewUser.raiting) > 4 ? 'success' : 'warning'}`}>{viewUser.raiting}</span>}\r\n                    </div>\r\n                </div>\r\n                <div onMouseEnter={()=>setSection(2)} onMouseLeave={()=>setSection(0)} className={`bp3-card bp3-elevation-${section === 2? '4':'2'} .modifier profile-section-two`}>\r\n                    <div className=\"profile-section-two-each\">\r\n                        <Waveform url={viewUser.track_url} title={viewUser.track_title} />\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-two-each\">\r\n                        <span className=\"bp3-tag\">About</span> {viewUser.about}\r\n                    </div>\r\n\r\n                    <div className=\"bp3-tabs profile-section-two-each\">\r\n                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                            <li onClick={() => setSelected('video')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'video' ? true : false}>Video</li>\r\n                            <li onClick={() => setSelected('review')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'review' ? true : false}>Reviews</li>\r\n                            <li onClick={() => setSelected('connection')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'connection' ? true : false}>Connections</li>\r\n                        </ul>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'video' ? false : true}>\r\n                            <iframe width=\"560\" height=\"315\" src={viewUser.youtube_link} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                        </div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'review' ? false : true}>Reviews</div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'connection' ? false : true}>Connections</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default EachProfile","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js",["215"],"import Utils from '../utils/common.utils'\r\nimport axios from 'axios'\r\n\r\nexport let getGigs = async (type, gender, token) => {\r\n    let result = [];\r\n\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        method: 'GET'\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/getGigs/${type}/${gender}`, options)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                return res.json()\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                result = res\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\n\r\nexport let getGigByID = async (id, token) => {\r\n    let result = [];\r\n\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        method: 'GET'\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/getGig/${id}`, options)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                return res.json()\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                result = res\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\nexport let getGigBiddings = async (gigID, token) => {\r\n    let result = [];\r\n\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        method: 'GET'\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/getBidsByGigID/${gigID}`, options)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                return res.json()\r\n            }\r\n        }).then(res => {\r\n            if (res) {\r\n                result = res\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\nexport let removeBid = async (bidID, token) => {\r\n    let result = false;\r\n\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        method: 'DELETE'\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/removeBid/${bidID}`, options)\r\n        .then(res => {\r\n            console.log(res)\r\n            if (res.status === 200) {\r\n                result = true\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport let submitBid = async (bid, token) => {\r\n    let result = false;\r\n\r\n    let options = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(bid)\r\n\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/submitBid`, options)\r\n        .then(res => {\r\n            console.log(res)\r\n            if (res.status === 200) {\r\n                result = true\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n\r\n\r\n}\r\n\r\n\r\nexport let closeGigByID = async (gig_id, token) => {\r\n    let result = false;\r\n\r\n    let options = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/closeGigByID/${gig_id}`, options)\r\n        .then(res =>  {\r\n            console.log(res)\r\n            if (res.status === 200) {\r\n                result = true\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n\r\n}\r\n\r\n\r\nexport let awardGigByID = async (gig_id, user_id, token) => {\r\n    let result = false;\r\n\r\n    let options = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n            user_id\r\n        })\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/awardGigByID/${gig_id}`, options)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                result = true\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n\r\n}\r\n\r\n\r\n\r\nexport let getBidExist = async (user_id, token) => {\r\n    let result = false;\r\n\r\n    let options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/gigs/bidExist/${user_id}`, options)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                result = true\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n\r\n}\r\n\r\nexport let getCards = async () => {\r\n    let result = [];\r\n\r\n    await fetch(`${Utils.url}/api/v1/gigs/cards`)\r\n        .then(res => {\r\n            if (res.status === 200) {\r\n                return res.json()\r\n            }\r\n        })\r\n        .then(res=> {\r\n            if(res) {\r\n                result = res\r\n            }\r\n        })\r\n        .catch(err =>\r\n            console.log(err)\r\n        )\r\n\r\n    return result\r\n\r\n}","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js",["216","217","218"],"import React, { useRef } from 'react'\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport './Search.css'\r\n\r\n\r\nconst Search = ({ search }) => {\r\n\r\n    const name = useRef()\r\n    const language = useRef()\r\n    const genre = useRef()\r\n\r\n\r\n    const handleSearch = () => {\r\n        let data = {}\r\n\r\n        let result1 = (name.current.value.length > 0) ? data['name'] = name.current.value : null\r\n        let result2 = (language.current.value.length > 0) ? data['language'] = language.current.value : null\r\n        let result3 = (genre.current.value.length > 0) ? data['genre'] = genre.current.value : null\r\n\r\n        search(data)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={name} type=\"text\" className=\"bp3-input\" placeholder=\"Name...\" />\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={language} type=\"text\" className=\"bp3-input\" placeholder=\"Language...\" />\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier search-container-field\">\r\n                <span className=\"bp3-icon bp3-icon-filter\"></span>\r\n                <input ref={genre} type=\"text\" className=\"bp3-input\" placeholder=\"Genre...\" />\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"search-container-field\">\r\n                <button onClick={handleSearch} type=\"button\" className=\"bp3-button bp3-icon-search .modifier\">Search</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js",["219"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js",["220"],{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":17,"column":12,"nodeType":"227","messageId":"228","endLine":17,"endColumn":16},{"ruleId":"225","severity":1,"message":"229","line":9,"column":18,"nodeType":"227","messageId":"228","endLine":9,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":14,"column":8,"nodeType":"232","endLine":14,"endColumn":10,"suggestions":"233"},{"ruleId":"225","severity":1,"message":"234","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"235","line":1,"column":16,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"226","line":11,"column":10,"nodeType":"227","messageId":"228","endLine":11,"endColumn":14},{"ruleId":"225","severity":1,"message":"236","line":2,"column":50,"nodeType":"227","messageId":"228","endLine":2,"endColumn":56},{"ruleId":"230","severity":1,"message":"231","line":38,"column":8,"nodeType":"232","endLine":38,"endColumn":10,"suggestions":"237"},{"ruleId":"230","severity":1,"message":"231","line":25,"column":8,"nodeType":"232","endLine":25,"endColumn":10,"suggestions":"238"},{"ruleId":"230","severity":1,"message":"231","line":23,"column":8,"nodeType":"232","endLine":23,"endColumn":10,"suggestions":"239"},{"ruleId":"225","severity":1,"message":"240","line":3,"column":8,"nodeType":"227","messageId":"228","endLine":3,"endColumn":20},{"ruleId":"230","severity":1,"message":"241","line":52,"column":6,"nodeType":"232","endLine":52,"endColumn":11,"suggestions":"242"},{"ruleId":"225","severity":1,"message":"243","line":15,"column":13,"nodeType":"227","messageId":"228","endLine":15,"endColumn":20},{"ruleId":"225","severity":1,"message":"244","line":16,"column":13,"nodeType":"227","messageId":"228","endLine":16,"endColumn":20},{"ruleId":"225","severity":1,"message":"245","line":17,"column":13,"nodeType":"227","messageId":"228","endLine":17,"endColumn":20},{"ruleId":"225","severity":1,"message":"246","line":18,"column":13,"nodeType":"227","messageId":"228","endLine":18,"endColumn":20},{"ruleId":"225","severity":1,"message":"243","line":17,"column":13,"nodeType":"227","messageId":"228","endLine":17,"endColumn":20},{"ruleId":"225","severity":1,"message":"244","line":18,"column":13,"nodeType":"227","messageId":"228","endLine":18,"endColumn":20},{"ruleId":"225","severity":1,"message":"245","line":19,"column":13,"nodeType":"227","messageId":"228","endLine":19,"endColumn":20},{"ruleId":"225","severity":1,"message":"246","line":20,"column":13,"nodeType":"227","messageId":"228","endLine":20,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":18,"column":8,"nodeType":"232","endLine":18,"endColumn":10,"suggestions":"247"},{"ruleId":"248","severity":1,"message":"249","line":94,"column":29,"nodeType":"250","endLine":94,"endColumn":220},{"ruleId":"230","severity":1,"message":"231","line":19,"column":8,"nodeType":"232","endLine":19,"endColumn":10,"suggestions":"251"},{"ruleId":"248","severity":1,"message":"249","line":115,"column":29,"nodeType":"250","endLine":115,"endColumn":219},{"ruleId":"225","severity":1,"message":"252","line":2,"column":8,"nodeType":"227","messageId":"228","endLine":2,"endColumn":13},{"ruleId":"225","severity":1,"message":"243","line":17,"column":13,"nodeType":"227","messageId":"228","endLine":17,"endColumn":20},{"ruleId":"225","severity":1,"message":"244","line":18,"column":13,"nodeType":"227","messageId":"228","endLine":18,"endColumn":20},{"ruleId":"225","severity":1,"message":"245","line":19,"column":13,"nodeType":"227","messageId":"228","endLine":19,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":25,"column":8,"nodeType":"232","endLine":25,"endColumn":10,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":31,"column":21,"nodeType":"250","endLine":31,"endColumn":64},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["258"],"'React' is defined but never used.","'useContext' is defined but never used.","'useRef' is defined but never used.",["259"],["260"],["261"],"'CursorPlugin' is defined but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.",["262"],"'result1' is assigned a value but never used.","'result2' is assigned a value but never used.","'result3' is assigned a value but never used.","'result4' is assigned a value but never used.",["263"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",["264"],"'axios' is defined but never used.",["265"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",{"desc":"266","fix":"267"},{"desc":"266","fix":"268"},{"desc":"266","fix":"269"},{"desc":"266","fix":"270"},{"desc":"271","fix":"272"},{"desc":"266","fix":"273"},{"desc":"266","fix":"274"},{"desc":"266","fix":"275"},"Update the dependencies array to be: [checkCurrentUser]",{"range":"276","text":"277"},{"range":"278","text":"277"},{"range":"279","text":"277"},{"range":"280","text":"277"},"Update the dependencies array to be: [url, volume]",{"range":"281","text":"282"},{"range":"283","text":"277"},{"range":"284","text":"277"},{"range":"285","text":"277"},[450,452],"[checkCurrentUser]",[1278,1280],[833,835],[835,837],[1710,1715],"[url, volume]",[612,614],[696,698],[1076,1078]]