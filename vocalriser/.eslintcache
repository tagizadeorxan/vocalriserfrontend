[{"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js":"1","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js":"3","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js":"4","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js":"5","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js":"6","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js":"7","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js":"8","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js":"9","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js":"10","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js":"11","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js":"12","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js":"13","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js":"14","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js":"15","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js":"16","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js":"17","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js":"18","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js":"19","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js":"20","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js":"21","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js":"22","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js":"23","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js":"24","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js":"25","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js":"26","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js":"27","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js":"28","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js":"29","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js":"30","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js":"31","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js":"32","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js":"33","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js":"34","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js":"35","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js":"36","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js":"37","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js":"38","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js":"39","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js":"40","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js":"41","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js":"42","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js":"43","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\index.js":"44","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\CreateJob.js":"45","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\common.helper.js":"46","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\index.js":"47","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\GigCenter.js":"48","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\index.js":"49","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\AwardedGig.js":"50","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\index.js":"51","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\Messages.js":"52","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\messages.helper.js":"53","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\notifications.helper.js":"54","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\index.js":"55","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\Settings.js":"56"},{"size":550,"mtime":1612602545254,"results":"57","hashOfConfig":"58"},{"size":362,"mtime":1606758772215,"results":"59","hashOfConfig":"58"},{"size":2728,"mtime":1612809026625,"results":"60","hashOfConfig":"58"},{"size":106,"mtime":1610539988082,"results":"61","hashOfConfig":"58"},{"size":627,"mtime":1612601460810,"results":"62","hashOfConfig":"58"},{"size":1612,"mtime":1612601756651,"results":"63","hashOfConfig":"58"},{"size":3509,"mtime":1611762889670,"results":"64","hashOfConfig":"58"},{"size":49,"mtime":1610543626405,"results":"65","hashOfConfig":"58"},{"size":46,"mtime":1610555378485,"results":"66","hashOfConfig":"58"},{"size":2752,"mtime":1612817840783,"results":"67","hashOfConfig":"58"},{"size":58,"mtime":1610564265827,"results":"68","hashOfConfig":"58"},{"size":5575,"mtime":1611781906391,"results":"69","hashOfConfig":"58"},{"size":2953,"mtime":1611673438069,"results":"70","hashOfConfig":"58"},{"size":52,"mtime":1610621487112,"results":"71","hashOfConfig":"58"},{"size":4467,"mtime":1612809073028,"results":"72","hashOfConfig":"58"},{"size":52,"mtime":1610621770240,"results":"73","hashOfConfig":"58"},{"size":993,"mtime":1612641053248,"results":"74","hashOfConfig":"58"},{"size":61,"mtime":1610627265520,"results":"75","hashOfConfig":"58"},{"size":7751,"mtime":1612426750633,"results":"76","hashOfConfig":"58"},{"size":61,"mtime":1610628721159,"results":"77","hashOfConfig":"58"},{"size":7692,"mtime":1611763019800,"results":"78","hashOfConfig":"58"},{"size":46,"mtime":1610628868193,"results":"79","hashOfConfig":"58"},{"size":7920,"mtime":1612429470636,"results":"80","hashOfConfig":"58"},{"size":171,"mtime":1612192214544,"results":"81","hashOfConfig":"58"},{"size":1326,"mtime":1610980815748,"results":"82","hashOfConfig":"58"},{"size":58,"mtime":1610739287166,"results":"83","hashOfConfig":"58"},{"size":2657,"mtime":1611243952657,"results":"84","hashOfConfig":"58"},{"size":2280,"mtime":1611242185966,"results":"85","hashOfConfig":"58"},{"size":712,"mtime":1610980803634,"results":"86","hashOfConfig":"58"},{"size":2388,"mtime":1611242150628,"results":"87","hashOfConfig":"58"},{"size":55,"mtime":1610817341355,"results":"88","hashOfConfig":"58"},{"size":14033,"mtime":1611996553266,"results":"89","hashOfConfig":"58"},{"size":57,"mtime":1610872049349,"results":"90","hashOfConfig":"58"},{"size":1157,"mtime":1611949877490,"results":"91","hashOfConfig":"58"},{"size":67,"mtime":1610892319851,"results":"92","hashOfConfig":"58"},{"size":8750,"mtime":1611780794042,"results":"93","hashOfConfig":"58"},{"size":1355,"mtime":1611909475093,"results":"94","hashOfConfig":"58"},{"size":10001,"mtime":1612425986253,"results":"95","hashOfConfig":"58"},{"size":1788,"mtime":1611241985599,"results":"96","hashOfConfig":"58"},{"size":55,"mtime":1610956261556,"results":"97","hashOfConfig":"58"},{"size":14985,"mtime":1612426393676,"results":"98","hashOfConfig":"58"},{"size":55,"mtime":1611127023569,"results":"99","hashOfConfig":"58"},{"size":1074,"mtime":1612040531965,"results":"100","hashOfConfig":"58"},{"size":61,"mtime":1611156096598,"results":"101","hashOfConfig":"58"},{"size":11695,"mtime":1611762739851,"results":"102","hashOfConfig":"58"},{"size":897,"mtime":1611169857993,"results":"103","hashOfConfig":"58"},{"size":61,"mtime":1611211628728,"results":"104","hashOfConfig":"58"},{"size":12766,"mtime":1612429244771,"results":"105","hashOfConfig":"58"},{"size":64,"mtime":1611380649087,"results":"106","hashOfConfig":"58"},{"size":6673,"mtime":1612424926975,"results":"107","hashOfConfig":"58"},{"size":58,"mtime":1611475320129,"results":"108","hashOfConfig":"58"},{"size":7355,"mtime":1612598907752,"results":"109","hashOfConfig":"58"},{"size":3412,"mtime":1611648789163,"results":"110","hashOfConfig":"58"},{"size":2011,"mtime":1611648333027,"results":"111","hashOfConfig":"58"},{"size":58,"mtime":1612808971623,"results":"112","hashOfConfig":"58"},{"size":775,"mtime":1612811081062,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"aeoksf",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"116"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"116"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"116"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js",[],["233","234"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js",["235"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js",["236"],"import React, { useState, useContext, useRef } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestLogin } from '../helpers/auth.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Login.css'\r\n\r\n\r\n\r\nlet Login = () => {\r\n\r\n    const email = useRef()\r\n    const password = useRef()\r\n\r\n\r\n    const [error, setError] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState()\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [success, setSuccess] = useState(false)\r\n    const [signup, setSignUp] = useState(false)\r\n    const [passwordShow, setPasswordShow] = useState(false)\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            loginUser()\r\n        }\r\n    }\r\n\r\n    const loginUser = async () => {\r\n        setError(false)\r\n        setErrorMessage('')\r\n        let userEmail = email.current.value\r\n        let userPassword = password.current.value\r\n\r\n\r\n        if (userEmail !== '') {\r\n            if (userPassword !== '') {\r\n                setError(false)\r\n                let data = {\r\n                    email: userEmail,\r\n                    password: userPassword\r\n                }\r\n                let result = await requestLogin(data)\r\n                if (result.error) {\r\n                    setError(true)\r\n                    setErrorMessage(result.error)\r\n                } else {\r\n                    \r\n                    await dispatch({\r\n                        type: \"LOGIN\",\r\n                        payload: result.user\r\n                    })\r\n                    setSuccess(true)\r\n                }\r\n\r\n            } else {\r\n                setError(true)\r\n                setErrorMessage('Password can not be empty')\r\n            }\r\n        } else {\r\n            setError(true)\r\n            setErrorMessage('Email can not be empty')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const showPassword = () => {\r\n        setPasswordShow(!passwordShow)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"login-container\">\r\n\r\n            <div className=\"bp3-input-group .modifier login-general\">\r\n                <input onKeyPress={handleKeyPress} ref={email} type={\"email\"} className=\"bp3-input\" placeholder=\"Enter your email...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-envelope .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <div className=\"bp3-input-group .modifier login-general \">\r\n                <input onKeyPress={handleKeyPress} ref={password} type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Enter your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <button type=\"button\" onClick={loginUser} className={`bp3-button bp3-icon-log-in .modifier login-general ${error ? 'bp3-intent-danger' : 'bp3-intent-success'}`}>Sign in</button>\r\n\r\n            <button type=\"button\" onClick={() => setSignUp(true)} className=\"bp3-button .modifier login-general\">Sign up</button>\r\n\r\n            {error ? <p className=\"login-general login-error\"><i className=\"bp3-icon-error\"></i> {errorMessage}</p> : null}\r\n            {signup ? <Redirect push to=\"/registration\" /> : null}\r\n            {success ? <Redirect push to=\"/profile\" /> : null}\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js",["237","238"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js",["239","240","241"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js",["242"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport WaveSurfer from \"wavesurfer.js\";\r\n\r\nimport './Waveform.css'\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\nconst formWaveSurferOptions = ref => ({\r\n  container: ref,\r\n  waveColor: \"#eee\",\r\n  progressColor: \"OrangeRed\",\r\n  cursorColor: \"OrangeRed\",\r\n  barWidth: 4,\r\n  barRadius: 3,\r\n  responsive: true,\r\n  height: 120,\r\n  // If true, normalize by the maximum peak instead of 1.0.\r\n  normalize: true,\r\n  // Use the PeakCache to improve rendering speed of large waveforms.\r\n  partialRender: true\r\n});\r\n\r\nexport default function Waveform({ url,title }) {\r\n  const waveformRef = useRef(null);\r\n  var wavesurfer = useRef(null);\r\n  const [playing, setPlay] = useState(false);\r\n  const [volume, setVolume] = useState(0.5);\r\n\r\n  // create new WaveSurfer instance\r\n  // On component mount and when url changes\r\n  useEffect(() => {\r\n    setPlay(false);\r\n\r\n    const options = formWaveSurferOptions(waveformRef.current);\r\n    wavesurfer.current = WaveSurfer.create(options);\r\n    wavesurfer.current.load(url);\r\n\r\n    wavesurfer.current.on(\"ready\", function () {\r\n      // https://wavesurfer-js.org/docs/methods.html\r\n      // wavesurfer.current.play();\r\n      // setPlay(true);\r\n\r\n      // make sure object stillavailable when file loaded\r\n      if (wavesurfer.current) {\r\n        wavesurfer.current.setVolume(volume);\r\n        setVolume(volume);\r\n      }\r\n    });\r\n    // Removes events, elements and disconnects Web Audio nodes.\r\n    // when component unmount\r\n    return () => wavesurfer.current.destroy();\r\n  }, [url]);\r\n\r\n  const handlePlayPause = () => {\r\n    setPlay(!playing);\r\n    wavesurfer.current.playPause();\r\n  };\r\n\r\n\r\n  const onVolumeChange = e => {\r\n    const { target } = e;\r\n    const newVolume = +target.value;\r\n\r\n    if (newVolume) {\r\n      setVolume(newVolume);\r\n      wavesurfer.current.setVolume(newVolume || 1);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n    <h5 className=\"bp3-heading\">{title}</h5>\r\n      <div id=\"waveform\" ref={waveformRef} />\r\n      <div className=\"controls\">\r\n      <button onClick={handlePlayPause} type=\"button\" className={`bp3-button ${!playing ? \"bp3-icon-play\" : \"bp3-icon-pause\"}`}></button>\r\n      \r\n    <input \r\n      className=\"controls-volume\"\r\n      type=\"range\"\r\n      id=\"volume\"\r\n      name=\"volume\"\r\n      // waveSurfer recognize value of `0` same as `1`\r\n      //  so we need to set some zero-ish value for silence\r\n      min=\"0.01\"\r\n      max=\"1\"\r\n      step=\".025\"\r\n      onChange={onVolumeChange}\r\n      defaultValue={volume}\r\n    />\r\n    \r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js",["243","244"],"import React, { useContext, useState, useRef } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getUserByID } from '../helpers/profile.helper'\r\nimport { createMessage, sendMessage } from '../helpers/messages.helper'\r\nimport { createNotification } from '../helpers/notifications.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\n\r\nconst EachProfile = (props) => {\r\n\r\n    const messageInput = useRef()\r\n\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [selected, setSelected] = useState('video')\r\n    let [section, setSection] = useState()\r\n    let [viewUser, setViewUser] = useState({})\r\n    const [message, setMessage] = useState()\r\n    const [start,setStart] = useState(true)\r\n\r\n\r\n    const handlSendMessage = async (e) => {\r\n        e.preventDefault()\r\n        \r\n\r\n        let data = {\r\n            sender: user.user.id,\r\n            sender_fullname: `${user.user.first_name} ${user.user.last_name}`,\r\n            reciever: viewUser.id,\r\n            reciever_fullname: `${viewUser.first_name} ${viewUser.last_name}`,\r\n            message: messageInput.current.value\r\n        }\r\n        let result = await createMessage(data, user.token)\r\n\r\n        if (result.hasOwnProperty(\"id\")) {\r\n            setMessage(false)\r\n            let notification = {\r\n                type: \"message\",\r\n                fromUser: user.user.id,\r\n                toUser: viewUser.id,\r\n                messageID: result.id\r\n            }\r\n            let notify = await createNotification(notification, user.token)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const checkCurrentUser = async () => {\r\n\r\n        const result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n      \r\n            let viewedUser = await getUserByID(props.match.params.id, user.token)\r\n       \r\n            if (viewedUser) {\r\n                setViewUser(viewedUser)\r\n            \r\n                setLogin('success')\r\n            } else {\r\n                setLogin('failed')\r\n            }\r\n\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n       setStart(false)\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n\r\n    else if (!viewUser.hasOwnProperty('id')) {\r\n       props.history.goBack()\r\n        return (\r\n            <p></p>\r\n        )\r\n    }\r\n    else {\r\n       \r\n\r\n        return (\r\n            <div className=\"profile-section\">\r\n                <div onMouseEnter={() => setSection(1)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 1 ? '4' : '2'} .modifier profile-section-one`}>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <img alt=\"user\" style={{ width: '100px' }} src={viewUser.image} />\r\n\r\n                    </div>\r\n\r\n                    <h1 className=\"bp3-heading profile-section-one-each\">{viewUser.first_name} {viewUser.last_name}</h1>\r\n                    {viewUser.id !== user.user.id? <button onClick={() => setMessage(true)} className=\"bp3-button\">message</button>:null}\r\n\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.age}</span>\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.gender}</span>\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        Sounds like: {viewUser.soundslike.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Microphones: {viewUser.microphone.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Genres: {viewUser.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Country: <span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewUser.country}</span>\r\n                    City: <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{viewUser.city}</span>\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                   \r\n                        Raiting: {viewUser.raiting === null  ? <span className=\"bp3-tag\">No reviews yet</span> : <span\r\n                            className={`bp3-tag bp3-intent-${parseFloat(viewUser.raiting) <= 3 ? 'danger' :\r\n                                parseFloat(viewUser.raiting) > 4 ? 'success' : 'warning'}`}>{viewUser.raiting}</span>}\r\n                    </div>\r\n                </div>\r\n                <div onMouseEnter={() => setSection(2)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 2 ? '4' : '2'} .modifier profile-section-two`}>\r\n                    <div className=\"profile-section-two-each\">\r\n                        <Waveform url={viewUser.track_url} title={viewUser.track_title} />\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-two-each\">\r\n                        <span className=\"bp3-tag\">About</span> {viewUser.about}\r\n                    </div>\r\n\r\n                    <div className=\"bp3-tabs profile-section-two-each\">\r\n                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                            <li onClick={() => setSelected('video')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'video' ? true : false}>Video</li>\r\n                            <li onClick={() => setSelected('review')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'review' ? true : false}>Reviews</li>\r\n                            <li onClick={() => setSelected('connection')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'connection' ? true : false}>Connections</li>\r\n                        </ul>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'video' ? false : true}>\r\n                            <iframe title=\"video\" width=\"560\" height=\"315\" src={viewUser.youtube_link} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                        </div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'review' ? false : true}>Reviews</div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'connection' ? false : true}>Connections</div>\r\n                    </div>\r\n                </div>\r\n\r\n                {message ? <div className=\"bp3-dialog-container\">\r\n                    <div className=\"bp3-dialog\">\r\n                        <div className=\"bp3-dialog-header\">\r\n                            <span className=\"bp3-icon-large bp3-icon-inbox\"></span>\r\n                            <h4 className=\"bp3-heading\">Message</h4>\r\n                            <button aria-label=\"Close\" className=\"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross\"></button>\r\n                        </div>\r\n                        <div className=\"bp3-dialog-body\">\r\n                            <form onSubmit={handlSendMessage}>\r\n                                <input ref={messageInput} type=\"text\" className=\"bp3-input\" required minLength={1} />\r\n                                <button onClick={() => setMessage(false)} type=\"button\" className=\"bp3-button\">close</button>\r\n                                <button type=\"submit\" className=\"bp3-button bp3-intent-primary\">Send</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div> : null}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default EachProfile","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js",["245","246"],"import React, { useContext, useState } from 'react'\r\nimport UserContext from '../../contexts/user.context'\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getGigByID, getGigBiddings, removeBid, submitBid, closeGigByID, awardGigByID, getBidExist } from '../helpers/gig.helper'\r\nimport {createNotification} from '../helpers/notifications.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\nimport './EachGig.css'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport Utils from '../utils/common.utils'\r\n\r\n\r\nconst EachGig = (props) => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [viewedGig, setViewGig] = useState()\r\n    const [bidError, setBidError] = useState('')\r\n    const [bidExist, setBidExist] = useState(false)\r\n    const [biddings, setBiddings] = useState([])\r\n    const [userBid, setUserBid] = useState()\r\n    const bidRef = React.createRef()\r\n    const [selected, setSelected] = useState('genres')\r\n    const [start,setStart] = useState(true)\r\n\r\n\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const handleBid = async () => {\r\n\r\n        setBidError('')\r\n        if (bidRef.current.value > viewedGig.budgetMax) {\r\n            setBidError('max')\r\n        } else if (bidRef.current.value < viewedGig.budgetMin) {\r\n            setBidError('min')\r\n        } else {\r\n        \r\n            setBidError('')\r\n            let refresh = await handleRefreshBid()\r\n            let bidExist = await getBidExist({\r\n                user_id: user.user.id,\r\n                gig_id: viewedGig.id\r\n            }, user.token)\r\n\r\n            if (bidExist) {\r\n             \r\n                setBiddings(refresh)\r\n            } else {\r\n           \r\n                let bid = {\r\n                    gig_id: viewedGig.id,\r\n                    user_id: user.user.id,\r\n                    amount: bidRef.current.value,\r\n                    full_name: `${user.user.first_name} ${user.user.last_name}`,\r\n                    track_url: user.user.track_url,\r\n                    track_title: user.user.track_title,\r\n                    soundslike: user.user.soundslike\r\n                }\r\n\r\n                let result = await submitBid(bid, user.token)\r\n\r\n                let notification = {\r\n                    type: \"bidGig\",\r\n                    fromUser: user.user.id,\r\n                    toUser:viewedGig.user_id,\r\n                    gigID:viewedGig.id\r\n                }\r\n                let notify = await createNotification(notification, user.token) \r\n\r\n\r\n                if (result) {\r\n                    window.location.reload(true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleRefreshGig = async () => {\r\n        let result = false;\r\n        let viewedGig = await getGigByID(props.match.params.id, user.token)\r\n        if (viewedGig) {\r\n            result = viewedGig\r\n        }\r\n        return result\r\n    }\r\n\r\n    const closeGig = async () => {\r\n        let refresh = await handleRefreshGig()\r\n        if (refresh) {\r\n            if (refresh.active === 0) {\r\n                setViewGig(refresh)\r\n            } else {\r\n\r\n                let result = await closeGigByID(viewedGig.id, user.token)\r\n                if (result) {\r\n                    let updatedGig = { ...viewedGig, active: 0 }\r\n                    setViewGig(updatedGig)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const awardGig = async (user_id) => {\r\n        let refresh = await handleRefreshGig()\r\n        if (refresh) {\r\n            if (viewedGig.active === 2) {\r\n     \r\n \r\n                setViewGig(refresh)\r\n           \r\n        \r\n            } else {\r\n\r\n                let result = await awardGigByID(viewedGig.id, user_id, user.token)\r\n                if (result) {\r\n               \r\n                    let updatedGig = { ...viewedGig, active: 2, awardedUser: user_id }\r\n\r\n                    let notification = {\r\n                        type: \"awardgig\",\r\n                        fromUser: viewedGig.user_id,\r\n                        toUser:user_id,\r\n                        gigID:viewedGig.id\r\n                    }\r\n                    let notify = await createNotification(notification, user.token)     \r\n\r\n                    setViewGig(updatedGig)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleRefreshBid = async () => {\r\n        let result = false;\r\n        let biddings = await getGigBiddings(props.match.params.id, user.token)\r\n        if (biddings) {\r\n            result = biddings\r\n        }\r\n        return result\r\n\r\n    }\r\n\r\n\r\n\r\n    const handleRemove = async (bid) => {\r\n        let refresh = await handleRefreshBid()\r\n        let data = {\r\n            user_id:bid.user_id,\r\n            gig_id:viewedGig.id\r\n        }\r\n\r\n        \r\n        let bidExist = await getBidExist(data, user.token)\r\n        \r\n        if (refresh) {\r\n            if (bidExist) {\r\n                if (bid.user_id === user.user.id) {\r\n                  \r\n                    let result = await removeBid(bid.id, user.token)\r\n                    if (result) {\r\n                        window.location.reload()\r\n                    }\r\n                }\r\n\r\n            } else {\r\n              \r\n                setBiddings(refresh)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const checkCurrentUser = async () => {\r\n        setBidExist(false)\r\n       \r\n        const result = await requestCurrentUser(user.token)\r\n    \r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n          \r\n            let viewedGig = await getGigByID(props.match.params.id, user.token)\r\n            let biddings = await getGigBiddings(props.match.params.id, user.token)\r\n          \r\n\r\n           \r\n            if (viewedGig) {\r\n                setViewGig(viewedGig)\r\n                setBiddings(biddings)\r\n                let userBid = false;\r\n                \r\n                if (biddings.length > 0) {\r\n                    userBid = biddings.find(x => x.user_id === result.data.id)\r\n                }\r\n                if (userBid) {\r\n                    setBidExist(true)\r\n                    setUserBid(userBid)\r\n                } else {\r\n                    setBidExist(false)\r\n                }\r\n                setLogin('success')\r\n            } else {\r\n                setLogin('waiting')\r\n            }\r\n\r\n        } else {\r\n            setLogin('failed')\r\n\r\n        }\r\n    }\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n        setStart(false)\r\n    }\r\n\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    else if (!viewedGig.hasOwnProperty('id')) {\r\n        return (\r\n            <Redirect push to=\"/jobs\" />\r\n        )\r\n    }\r\n    else {\r\n\r\n        return (\r\n            <div className=\"gig-container\">\r\n                <div className=\"bp3-card each-gig-container\">\r\n                    <div className=\"each-gig-element\">\r\n                        <h1 className=\"bp3-heading\">{viewedGig.name}</h1>\r\n                        <span className={`bp3-tag bp3-intent-${viewedGig.active === 1 ? 'warning' : viewedGig.active === 2 ? 'success' : 'danger'}`}>\r\n                            {viewedGig.active === 1 ? 'active' : viewedGig.active === 2 ? 'Awarded' : 'Closed'}</span>\r\n\r\n                    </div>\r\n                    {viewedGig.active === 1 ? <button onClick={closeGig} style={{ width: \"10%\" }} className=\"bp3-button bp3-intent-danger bp3-outlined bp3-small\">Close</button> : null}\r\n                    <div className=\"each-gig-element\">\r\n                        <Waveform url={viewedGig.track_url} title={viewedGig.name} />\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Created date:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{new Date(viewedGig.createDate).toLocaleDateString(\"sq-AL\", { year: 'numeric', month: '2-digit', day: '2-digit' })}</span>\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Looking for:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.type === 'V' ? 'vocalist' : 'producer'}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Language:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.language}</span>\r\n                    Genre:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.genre}</span>\r\n                    BPM:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.bpm}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Created by:<Link to={`/profiles/${viewedGig.user_id}`}><span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }}\r\n                            className=\"bp3-tag .modifier\">{viewedGig.createdBy}</span></Link>\r\n                    Budget:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className={`bp3-tag .modifier bp3-intent-${bidError === 'min' ? 'danger' : 'success'}`}>{viewedGig.budgetMin}</span>\r\n                    -<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className={`bp3-tag .modifier bp3-intent-${bidError === 'max' ? 'danger' : 'success'}`}>{viewedGig.budgetMax}</span>{Utils.currency}\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Requirements:<p></p><span style={{ marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.requirements}</span>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"bp3-card bid-area\">\r\n\r\n                    {bidExist ? <div>\r\n                        Your bid is: <span className=\"bp3-tag\">{userBid.amount}</span>\r\n                    </div> : viewedGig.user_id === user.user.id || viewedGig.active !== 1 ? null : <div>\r\n                        <input ref={bidRef} className=\"bp3-input bp3-intent-primary bp3-large  .modifier\" type=\"number\" placeholder=\"Your bid\" dir=\"auto\" />\r\n                        <button onClick={handleBid} style={{ marginLeft: '1%' }} type=\"button\" className=\"bp3-button bp3-intent-success bp3-large .modifier\">Submit</button>\r\n                    </div>}\r\n                </div>\r\n\r\n                <div className=\"bp3-card bid-area\">\r\n                    {biddings.length > 0 ? biddings.map((bid, index) => <div key={index}>\r\n                        <blockquote className=\"bp3-blockquote each-bid bp3-card bp3-interactive\" >\r\n\r\n\r\n                            <div className=\"each-bid-element\">\r\n                                <div style={{ textAlign: 'center' }}> <span className=\"bp3-tag \" >{bid.amount} {Utils.currency}</span></div>\r\n                                <img alt=\"user\" style={{ width: '100px', padding: \"5%\" }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                                {viewedGig.awardedUser === user.user.id ? <div style={{ marginTop: '7%', textAlign: \"center\" }}><span className={`bp3-tag bp3-intent-success`}>Successfull bid</span></div> : null}\r\n                                {bidExist && bid.user_id === user.user.id && viewedGig.user_id !== user.user.id && viewedGig.active === 1 ? <div style={{ textAlign: \"center\" }}><button onClick={() => handleRemove(bid)} className=\"bp3-button bp3-intent-danger remove-bid\">remove Bid</button></div> : null}\r\n                                {viewedGig.user_id === user.user.id && viewedGig.active === 1 ? <div style={{ textAlign: \"center\" }}><button onClick={() => awardGig(bid.user_id)} className=\"bp3-button bp3-intent-success remove-bid\">Award Gig</button></div> : null}\r\n                            </div>\r\n                            <div className=\"each-bid-element\" style={{ width: '250px' }}>\r\n                                <NavLink to={`/profiles/${bid.user_id}`}> <h1 className=\"bp3-heading\">{bid.full_name} </h1></NavLink>\r\n\r\n                                <div className=\"bp3-tabs\">\r\n                                    <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                        <li onClick={() => panelSelect('genres')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'genres' ? true : false}>Genres</li>\r\n                                        <li onClick={() => panelSelect('microphones')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'microphones' ? true : false}>Microphone</li>\r\n                                        <li onClick={() => panelSelect('soundslike')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'soundslike' ? true : false}>Sounds like</li>\r\n                                    </ul>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'genres' ? false : true}>\r\n                                        {bid.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                                    </div>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'microphones' ? false : true}>\r\n                                        {bid.microphone.split(',').map((m, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{m}</span>)}\r\n                                    </div>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'soundslike' ? false : true}>\r\n                                        {bid.soundslike.split(',').map((s, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{s}</span>)}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"each-bid-element\" style={{ marginTop: '0%' }}>\r\n                                <Waveform url={bid.track_url} title={bid.track_title} className=\"bid-waveform\" />\r\n\r\n                            </div>\r\n                            <div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </blockquote>\r\n                    </div>) : null}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default EachGig","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\CreateJob.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\common.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\GigCenter.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\AwardedGig.js",["247"],"import React, { useContext, useState } from 'react'\r\nimport UserContext from '../../contexts/user.context'\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getGigByID, getPreparedContract, acceptGig, sendContract } from '../helpers/gig.helper'\r\nimport { createNotification } from '../helpers/notifications.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\n\r\nconst AwardedGig = (props) => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [viewedGig, setViewGig] = useState()\r\n    const [contract, setContract] = useState('')\r\n    const [start, setStart] = useState(true)\r\n\r\n\r\n    const handleAcceptGig = async () => {\r\n        const result = await acceptGig(viewedGig.id, user.token)\r\n        if (result) {\r\n\r\n            let notification = {\r\n                type: \"acceptGig\",\r\n                fromUser: user.user.id,\r\n                toUser: viewedGig.user_id,\r\n                gigID: viewedGig.id\r\n            }\r\n            let notify = await createNotification(notification, user.token)\r\n\r\n\r\n\r\n            setViewGig({ ...viewedGig, progress: 1 })\r\n            sendContract({\r\n                user_id: viewedGig.user_id,\r\n                awardedUser: viewedGig.awardedUser,\r\n                contract\r\n            }, user.token)\r\n        }\r\n    }\r\n\r\n\r\n    const checkCurrentUser = async () => {\r\n\r\n        const result = await requestCurrentUser(user.token)\r\n\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n\r\n            const viewedGig = await getGigByID(props.match.params.id, user.token)\r\n            if (viewedGig.progress === 0) {\r\n                const result = await getPreparedContract(props.match.params.id, user.token)\r\n                setContract(result.contract)\r\n            }\r\n\r\n            if (viewedGig) {\r\n                setViewGig(viewedGig)\r\n                setLogin('')\r\n            } else {\r\n                setLogin('failed')\r\n            }\r\n\r\n        } else {\r\n            setLogin('failed')\r\n\r\n        }\r\n    }\r\n\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n        setStart(false)\r\n    }\r\n\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    else if (!viewedGig.hasOwnProperty('id')) {\r\n        return (\r\n            <Redirect push to=\"/jobs\" />\r\n        )\r\n    }\r\n\r\n    else if (viewedGig.awardedUser === user.user.id && viewedGig.progress === 0) {\r\n        return (\r\n            <div className=\"bp3-dialog-container\">\r\n                <div className=\"bp3-dialog\">\r\n                    <div className=\"bp3-dialog-header\">\r\n                        <span className=\"bp3-icon-large bp3-icon-inbox\"></span>\r\n                        <h4 className=\"bp3-heading\">Aggrement</h4>\r\n                        <button aria-label=\"Close\" className=\"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross\"></button>\r\n                    </div>\r\n                    <div className=\"bp3-dialog-body\">\r\n                        {contract.length > 0 ? contract : null}\r\n                    </div>\r\n                    <div className=\"bp3-dialog-footer\">\r\n                        <div className=\"bp3-dialog-footer-actions\">\r\n                            <button type=\"button\" className=\"bp3-button\">Decline</button>\r\n                            <button type=\"submit\" className=\"bp3-button bp3-intent-primary\" onClick={handleAcceptGig}>Accept</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    else if (viewedGig.progress > 0) {\r\n\r\n        return (\r\n            <div className=\"gig-container\">\r\n                <div className=\"bp3-card each-gig-container\">\r\n                    <div className=\"each-gig-element\">\r\n                        <h1 className=\"bp3-heading\">{viewedGig.name}</h1>\r\n                        <span className={`bp3-tag bp3-intent-${viewedGig.active === 1 ? 'warning' : viewedGig.active === 2 ? 'success' : 'danger'}`}>\r\n                            {viewedGig.active === 1 ? 'active' : viewedGig.active === 2 ? 'Awarded' : 'Closed'}</span>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        <Waveform url={viewedGig.track_url} title={viewedGig.name} />\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Created date:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{new Date(viewedGig.createDate).toLocaleDateString(\"sq-AL\", { year: 'numeric', month: '2-digit', day: '2-digit' })}</span>\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Looking for:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.type === 'V' ? 'vocalist' : 'producer'}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Language:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.language}</span>\r\n                    Genre:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.genre}</span>\r\n                    BPM:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.bpm}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Created by:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.createdBy}</span>\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Requirements:<p></p><span style={{ marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.requirements}</span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    else if (viewedGig.awardedUser !== user.user.id && viewedGig.progress === 0) {\r\n        return (\r\n            <p>Agreement waiting for acception</p>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <Redirect push to=\"/jobs\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default AwardedGig","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\messages\\Messages.js",["248","249","250","251"],"import React, { useState, useContext, useRef } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getEachMessages, getMessages, sendMessage, deleteMessage, createMessage } from '../helpers/messages.helper'\r\nimport { readNotification, createNotification } from '../helpers/notifications.helper'\r\nimport PianoPlay from '../piano'\r\nimport './Messages.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nlet Messages = () => {\r\n    const sendMessageInput = useRef()\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [messages, setMessages] = useState([])\r\n    const [eachMessages, setEachMessages] = useState([])\r\n    const [selectedMessage, setSelectedMessage] = useState(0)\r\n    const [start, setStart] = useState(true)\r\n\r\n\r\n    const handleNotification = async () => {\r\n        user.notifications.map(n => {\r\n            if (n.type === \"message\") {\r\n                readNotification(n.id, user.token)\r\n                dispatch({\r\n                    type: \"NOTIFICATIONS\",\r\n                    payload: user.notifications.filter(item => item.id !== n.id)\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n    const handleDeleteMessage = async (message_id, type) => {\r\n        let data = {\r\n            id: message_id,\r\n            type\r\n        }\r\n\r\n        let result = await deleteMessage(data, user.token)\r\n\r\n        if (result) {\r\n            let messages = await getMessages(user.user.id, user.token)\r\n            if (messages) {\r\n                setMessages(messages)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleSendMessage = async (e, message_id, sender_id, sender_fullname, sender_message) => {\r\n        e.preventDefault()\r\n\r\n\r\n        let getMessagebyID = messages.find(e => e.id === message_id)\r\n        let toUser;\r\n        if (sender_id === getMessagebyID.sender) {\r\n            toUser = getMessagebyID.reciever\r\n        } else {\r\n            toUser = getMessagebyID.sender\r\n        }\r\n\r\n        let notification = {\r\n            type: \"message\",\r\n            fromUser: sender_id,\r\n            toUser,\r\n            messageID: message_id\r\n        }\r\n        let notify = await createNotification(notification, user.token)\r\n\r\n\r\n        let data = {\r\n            message_id,\r\n            sender_id,\r\n            sender_fullname,\r\n            sender_message: sendMessageInput.current.value\r\n        }\r\n\r\n        let result = await sendMessage(data, user.token)\r\n        let eachMessage = await getEachMessages(message_id, user.token)\r\n        if (result && eachMessage) {\r\n            setEachMessages(eachMessage)\r\n            sendMessageInput.current.value = \"\"\r\n        }\r\n    }\r\n\r\n    const handleEachMessages = async (message_id) => {\r\n\r\n\r\n        setSelectedMessage(message_id)\r\n\r\n        let eachMessages = await getEachMessages(message_id, user.token)\r\n\r\n        if (eachMessages) {\r\n            setEachMessages(eachMessages)\r\n        }\r\n    }\r\n\r\n    const checkCurrentUser = async () => {\r\n        handleNotification()\r\n\r\n        const result = await requestCurrentUser(user.token)\r\n\r\n\r\n        const messages = await getMessages(result.data.id, user.token)\r\n\r\n        if (result.status && messages) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            setMessages(messages.reverse())\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (start) {\r\n        checkCurrentUser()\r\n        setStart(false)\r\n    }\r\n\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else if (!user.user.hasOwnProperty('id')) {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n\r\n                {messages.length > 0 ? <div className=\"message-container\">\r\n\r\n                    <div className=\"bp3-card .modifier main-message-container\">\r\n                        {messages.map((message, index) => {\r\n\r\n                            if (message.sender === user.user.id && message.sender_active === 1) {\r\n                                return <div key={index}  >\r\n\r\n\r\n\r\n                                    <button style={{ width: '89%', position: 'relative' }} className={`bp3-button bp3-outlined bp3-intent-${selectedMessage === message.id ? 'success' : null}`} onClick={() => handleEachMessages(message.id)} key={index}>{message.reciever_fullname}</button>\r\n\r\n                                    <button style={{ float: 'right' }} onClick={() => handleDeleteMessage(message.id, 'sender_active')} className=\"bp3-button bp3-minimal bp3-icon-delete bp3-intent-danger\"></button>\r\n                                </div>\r\n                            } else if (message.reciever === user.user.id && message.reciever_active === 1) {\r\n                                return <div key={index}  >\r\n\r\n                                    <button style={{ width: '89%', position: 'relative' }} className={`bp3-button bp3-outlined bp3-intent-${selectedMessage === message.id ? 'success' : null}`} onClick={() => handleEachMessages(message.id)} key={index}>{message.sender_fullname}</button>\r\n\r\n                                    <button style={{ float: 'right' }} onClick={() => handleDeleteMessage(message.id, 'sender_active')} className=\"bp3-button bp3-minimal bp3-icon-delete bp3-intent-danger\"></button>\r\n                                </div>\r\n                            }\r\n                        })}\r\n                    </div>\r\n\r\n                    {selectedMessage > 0 ? <div className=\"bp3-card .modifier each-message-container\">\r\n                        {eachMessages.length > 0 ? eachMessages.map((m, i) => <div key={i}>\r\n                            <Link to={`/profiles/${m.sender_id}`}>{m.sender_fullname}</Link>\r\n                            <p>{m.sender_message}</p>\r\n                        </div>) : 'no Messages'}\r\n                        <div style={{ marginTop: \"10%\" }}>\r\n                            <form onSubmit={(e) => handleSendMessage(e, selectedMessage, user.user.id, `${user.user.first_name} ${user.user.last_name}`)}>\r\n                                <input ref={sendMessageInput} type=\"text\" minLength={1} className=\"bp3-input\" required />\r\n                                <button style={{ marginLeft: \"1%\" }} className=\"bp3-button \">send message</button>\r\n                            </form>\r\n\r\n                        </div>\r\n\r\n                    </div> : null}\r\n\r\n\r\n                </div> : <div className=\"information-block\">\r\n                        You have not received any messages yet!\r\n                        Employers can message bidders to discuss bids and ask questions.\r\n\r\n                        This is an important part of the bidding process as it allows for questions to be\r\n                        answered before a gig is awarded.\r\n\r\n                        Keep an eye out for new messages. \r\n\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Messages","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\messages.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\notifications.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\settings\\Settings.js",[],{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":34,"column":10,"nodeType":"258","messageId":"259","endLine":34,"endColumn":14},{"ruleId":"256","severity":1,"message":"257","line":17,"column":12,"nodeType":"258","messageId":"259","endLine":17,"endColumn":16},{"ruleId":"256","severity":1,"message":"260","line":7,"column":8,"nodeType":"258","messageId":"259","endLine":7,"endColumn":18},{"ruleId":"256","severity":1,"message":"261","line":26,"column":15,"nodeType":"258","messageId":"259","endLine":26,"endColumn":22},{"ruleId":"262","severity":1,"message":"263","line":78,"column":13,"nodeType":"264","endLine":78,"endColumn":56},{"ruleId":"265","severity":1,"message":"266","line":114,"column":82,"nodeType":"267","messageId":"268","endLine":114,"endColumn":84},{"ruleId":"269","severity":1,"message":"270","line":117,"column":21,"nodeType":"264","endLine":117,"endColumn":78},{"ruleId":"271","severity":1,"message":"272","line":52,"column":6,"nodeType":"273","endLine":52,"endColumn":11,"suggestions":"274"},{"ruleId":"256","severity":1,"message":"275","line":5,"column":25,"nodeType":"258","messageId":"259","endLine":5,"endColumn":36},{"ruleId":"256","severity":1,"message":"276","line":47,"column":17,"nodeType":"258","messageId":"259","endLine":47,"endColumn":23},{"ruleId":"256","severity":1,"message":"276","line":71,"column":21,"nodeType":"258","messageId":"259","endLine":71,"endColumn":27},{"ruleId":"256","severity":1,"message":"276","line":129,"column":25,"nodeType":"258","messageId":"259","endLine":129,"endColumn":31},{"ruleId":"256","severity":1,"message":"276","line":30,"column":17,"nodeType":"258","messageId":"259","endLine":30,"endColumn":23},{"ruleId":"256","severity":1,"message":"277","line":5,"column":68,"nodeType":"258","messageId":"259","endLine":5,"endColumn":81},{"ruleId":"265","severity":1,"message":"278","line":25,"column":34,"nodeType":"267","messageId":"279","endLine":25,"endColumn":36},{"ruleId":"256","severity":1,"message":"276","line":74,"column":13,"nodeType":"258","messageId":"259","endLine":74,"endColumn":19},{"ruleId":"265","severity":1,"message":"266","line":154,"column":56,"nodeType":"267","messageId":"268","endLine":154,"endColumn":58},"no-native-reassign",["280"],"no-negated-in-lhs",["281"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'pianoImage' is defined but never used.","'scrollY' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.","ArrayExpression",["282"],"'sendMessage' is defined but never used.","'notify' is assigned a value but never used.","'createMessage' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"283","fix":"284"},"Update the dependencies array to be: [url, volume]",{"range":"285","text":"286"},[1636,1641],"[url, volume]"]