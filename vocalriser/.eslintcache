[{"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js":"1","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js":"3","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js":"4","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js":"5","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js":"6","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js":"7","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js":"8","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js":"9","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js":"10","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js":"11","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js":"12","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js":"13","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js":"14","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js":"15","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js":"16","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js":"17","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js":"18","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js":"19","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js":"20","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js":"21","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js":"22","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js":"23","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js":"24","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js":"25","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js":"26","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js":"27","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js":"28","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js":"29","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js":"30","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js":"31","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js":"32","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js":"33","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js":"34","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js":"35","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js":"36","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js":"37","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js":"38","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js":"39","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js":"40","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js":"41","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js":"42","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js":"43","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\index.js":"44","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\CreateJob.js":"45","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\common.helper.js":"46","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\index.js":"47","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\GigCenter.js":"48","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\index.js":"49","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\AwardedGig.js":"50"},{"size":457,"mtime":1610618039489,"results":"51","hashOfConfig":"52"},{"size":362,"mtime":1606758772215,"results":"53","hashOfConfig":"52"},{"size":2371,"mtime":1611380980358,"results":"54","hashOfConfig":"52"},{"size":106,"mtime":1610539988082,"results":"55","hashOfConfig":"52"},{"size":576,"mtime":1610950650352,"results":"56","hashOfConfig":"52"},{"size":1182,"mtime":1610987015258,"results":"57","hashOfConfig":"52"},{"size":4228,"mtime":1610814551656,"results":"58","hashOfConfig":"52"},{"size":49,"mtime":1610543626405,"results":"59","hashOfConfig":"52"},{"size":46,"mtime":1610555378485,"results":"60","hashOfConfig":"52"},{"size":1314,"mtime":1611164206820,"results":"61","hashOfConfig":"52"},{"size":58,"mtime":1610564265827,"results":"62","hashOfConfig":"52"},{"size":5632,"mtime":1610814544368,"results":"63","hashOfConfig":"52"},{"size":3026,"mtime":1611071500805,"results":"64","hashOfConfig":"52"},{"size":52,"mtime":1610621487112,"results":"65","hashOfConfig":"52"},{"size":3117,"mtime":1611241411665,"results":"66","hashOfConfig":"52"},{"size":52,"mtime":1610621770240,"results":"67","hashOfConfig":"52"},{"size":211,"mtime":1611137008291,"results":"68","hashOfConfig":"52"},{"size":61,"mtime":1610627265520,"results":"69","hashOfConfig":"52"},{"size":7690,"mtime":1611333432996,"results":"70","hashOfConfig":"52"},{"size":61,"mtime":1610628721159,"results":"71","hashOfConfig":"52"},{"size":7605,"mtime":1611243496809,"results":"72","hashOfConfig":"52"},{"size":46,"mtime":1610628868193,"results":"73","hashOfConfig":"52"},{"size":7197,"mtime":1611164011830,"results":"74","hashOfConfig":"52"},{"size":170,"mtime":1611130852839,"results":"75","hashOfConfig":"52"},{"size":1326,"mtime":1610980815748,"results":"76","hashOfConfig":"52"},{"size":58,"mtime":1610739287166,"results":"77","hashOfConfig":"52"},{"size":2657,"mtime":1611243952657,"results":"78","hashOfConfig":"52"},{"size":2280,"mtime":1611242185966,"results":"79","hashOfConfig":"52"},{"size":712,"mtime":1610980803634,"results":"80","hashOfConfig":"52"},{"size":2388,"mtime":1611242150628,"results":"81","hashOfConfig":"52"},{"size":55,"mtime":1610817341355,"results":"82","hashOfConfig":"52"},{"size":6171,"mtime":1611241069378,"results":"83","hashOfConfig":"52"},{"size":57,"mtime":1610872049349,"results":"84","hashOfConfig":"52"},{"size":1161,"mtime":1611239772932,"results":"85","hashOfConfig":"52"},{"size":67,"mtime":1610892319851,"results":"86","hashOfConfig":"52"},{"size":6480,"mtime":1611239855512,"results":"87","hashOfConfig":"52"},{"size":712,"mtime":1610980824607,"results":"88","hashOfConfig":"52"},{"size":9306,"mtime":1611388471601,"results":"89","hashOfConfig":"52"},{"size":1788,"mtime":1611241985599,"results":"90","hashOfConfig":"52"},{"size":55,"mtime":1610956261556,"results":"91","hashOfConfig":"52"},{"size":14194,"mtime":1611240653089,"results":"92","hashOfConfig":"52"},{"size":55,"mtime":1611127023569,"results":"93","hashOfConfig":"52"},{"size":1003,"mtime":1611241045984,"results":"94","hashOfConfig":"52"},{"size":61,"mtime":1611156096598,"results":"95","hashOfConfig":"52"},{"size":11608,"mtime":1611210791823,"results":"96","hashOfConfig":"52"},{"size":897,"mtime":1611169857993,"results":"97","hashOfConfig":"52"},{"size":61,"mtime":1611211628728,"results":"98","hashOfConfig":"52"},{"size":12538,"mtime":1611381236574,"results":"99","hashOfConfig":"52"},{"size":64,"mtime":1611380649087,"results":"100","hashOfConfig":"52"},{"size":6435,"mtime":1611388543778,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"aeoksf",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"104"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\index.js",[],["215","216"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\App.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\contexts\\user.context.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\providers\\user.provider.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\reducers\\user.reducer.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\Login.js",["217"],"import React, { useState, useContext, useRef } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestLogin } from '../helpers/auth.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Login.css'\r\n\r\n\r\n\r\nlet Login = () => {\r\n\r\n    const email = useRef()\r\n    const password = useRef()\r\n    const confirmPassword = useRef()\r\n\r\n    const [error, setError] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState()\r\n    const [user,dispatch] = useContext(UserContext)\r\n    const [success, setSuccess] = useState(false)\r\n    const [signup, setSignUp] = useState(false)\r\n    const [passwordShow, setPasswordShow] = useState(false)\r\n\r\n\r\n    const loginUser = async () => {\r\n        setError(false)\r\n        setErrorMessage('')\r\n        let userEmail = email.current.value\r\n        let userPassword = password.current.value\r\n        let userConfirmPassword = confirmPassword.current.value\r\n        \r\n\r\n        if (userEmail !== '') {\r\n            if (userPassword !== '' || userConfirmPassword !== '') {\r\n                if (userPassword === userConfirmPassword) {\r\n                    setError(false)\r\n                    let data = {\r\n                        email: userEmail,\r\n                        password: userPassword\r\n                    }\r\n                    let result = await requestLogin(data)\r\n                    if (result.error) {\r\n                        setError(true)\r\n                        setErrorMessage(result.error)\r\n                    } else {\r\n                        console.log(result.user)\r\n                        await dispatch({\r\n                            type: \"LOGIN\",\r\n                            payload: result.user\r\n                        })\r\n                        setSuccess(true)\r\n                    }\r\n                } else {\r\n                    setError(true)\r\n                    setErrorMessage('Password not match')\r\n                }\r\n            } else {\r\n                setError(true)\r\n                setErrorMessage('Password can not be empty')\r\n            }\r\n        } else {\r\n            setError(true)\r\n            setErrorMessage('Email can not be empty')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const showPassword = () => {\r\n        setPasswordShow(!passwordShow)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"login-container\">\r\n\r\n            <div className=\"bp3-input-group .modifier login-general\">\r\n                <input ref={email} type={\"email\"} className=\"bp3-input\" placeholder=\"Enter your email...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-envelope .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <div className=\"bp3-input-group .modifier login-general \">\r\n                <input ref={password} type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Enter your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <div className=\"bp3-input-group .modifier login-general \">\r\n                <input ref={confirmPassword} type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Enter your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n           \r\n            <button type=\"button\" onClick={loginUser} className={`bp3-button bp3-icon-log-in .modifier login-general ${error? 'bp3-intent-danger':'bp3-intent-success'}`}>Sign in</button>\r\n            \r\n            <button type=\"button\" onClick={()=>setSignUp(true)} className=\"bp3-button .modifier login-general\">Sign up</button>\r\n\r\n             {error? <p className=\"login-general login-error\"><i className=\"bp3-icon-error\"></i> {errorMessage}</p>:null}\r\n            {signup ? <Redirect push to=\"/registration\" /> : null}\r\n            {success ? <Redirect push to=\"/home\" /> : null}\r\n\r\n\r\n       \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\login\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\home\\Home.js",["218","219"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\nlet Home = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [userdata, setUserData] = useState({})\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    let checkCurrentUser = async () => {\r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            setUserData(result.data)\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else if (!userdata.hasOwnProperty('id')) {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n                <PianoPlay width={1000} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Home","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\register\\Register.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\auth.helper.js",["220","221"],"import React, {useContext} from 'react'\r\nimport Utils from '../utils/common.utils'\r\n\r\n\r\n\r\n\r\n\r\nexport let requestLogin = async (data) => {\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n    }\r\n\r\n    let result = {}\r\n\r\n    await fetch(`${Utils.url}/api/v1/users/login`, options)\r\n        .then(res => {\r\n            if (res.status === 200 || res.status === 401 || res.status === 400) {\r\n                return res.json()\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status === 400) {\r\n                result.error = res.errors[0].msg\r\n            } else if (res.status === 401) {\r\n                result.error = res.message\r\n            } else {\r\n                if(res) {\r\n                    result.user = res\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            result.error = \"Please try again later\"\r\n        })\r\n    return result\r\n}\r\n\r\nexport let requestCurrentUser = async (token) => {\r\n  \r\n    let result = {\r\n        status: false,\r\n        data:{},\r\n        errorMessage:''\r\n    }\r\n\r\n    let options = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        method: 'GET'\r\n    }\r\n    await fetch(`${Utils.url}/api/v1/users/whoami`, options)\r\n        .then(res => {\r\n            console.log(res)\r\n            if (res.status === 200) {\r\n                result.status = true\r\n                return res.json()\r\n            } \r\n        })\r\n        .then(res=> {\r\n            if(res) {\r\n                result.data = res\r\n            }\r\n        })\r\n        .catch(error => {\r\n            result.errorMessage = \"Please try again later\"\r\n        })\r\n\r\n    return result\r\n}\r\n\r\nexport let createUser = async (data) => {\r\n    let options = {\r\n        method:'POST',\r\n        headers: {\r\n            'Accept': 'application/json, text/plain, */*',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    }\r\n\r\n    let result = {}\r\n\r\n    await fetch(`${Utils.url}/api/v1/users`,options)\r\n        .then(res => {\r\n            console.log(res)\r\n            if (res.status === 201 || res.status === 409 || res.status === 400) {\r\n                return res.json()\r\n            } \r\n        })\r\n        .then(res => {\r\n         if(res.status === 409 ){\r\n             result.errorMessage = res.message\r\n             result.status = false\r\n         }  else if (res.status === 400) {\r\n             result.errors = res\r\n            result.errorMessage = res.message\r\n            result.code = 400\r\n            result.status = false\r\n         }\r\n         else {\r\n             result.status = true\r\n         } \r\n         \r\n        })\r\n        .catch(error => {\r\n            result.errorMessage = \"Please try again later\"\r\n        })\r\n    return result\r\n}","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\header\\Header.js",["222"],"import React, { useContext, useState } from 'react';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Header.css'\r\n\r\n\r\nexport default function Header() {\r\n\r\n\r\n\r\n  const [user, dispatch] = useContext(UserContext)\r\n  const [logoutUser, setLogout] = useState(false)\r\n  const [path, setPath] = useState()\r\n  const [notificationTab, setNotificationTab] = useState(false)\r\n  \r\n  const locationChange = (nav) => {\r\n\r\n    let location = /[^/]*$/.exec(window.location.href)[0]\r\n\r\n    if (location === nav) {\r\n      window.location.reload()\r\n    } else if (path === nav) {\r\n      window.location = `/${nav}`\r\n    }\r\n    else {\r\n      setPath(nav)\r\n    }\r\n  }\r\n\r\n  const logout = async () => {\r\n    await dispatch({\r\n      type: \"LOGOUT\"\r\n    })\r\n    setLogout(true)\r\n  }\r\n\r\n  return (\r\n    <div >\r\n    \r\n      <nav className=\"bp3-navbar bp3-dark\">\r\n        <div >\r\n          <div className=\"bp3-navbar-group bp3-align-left\">\r\n            <div className=\"bp3-navbar-heading\">VocalRiser</div>\r\n          </div>\r\n          <div className=\"bp3-navbar-group bp3-align-right header-menu\">\r\n            <button onClick={() => locationChange('home')} className=\"bp3-button bp3-minimal\">Home</button>\r\n            <button onClick={() => locationChange('gigcenter')} className=\"bp3-button bp3-minimal\">Gig Center</button>\r\n            <button onClick={() => locationChange('vocalists')} className=\"bp3-button bp3-minimal\">Vocalists</button>\r\n            <button onClick={() => locationChange('producers')} className=\"bp3-button bp3-minimal\">Producers</button>\r\n            <button onClick={() => locationChange('jobs')} className=\"bp3-button bp3-minimal\">Jobs</button>\r\n            <span className=\"bp3-navbar-divider\"></span>\r\n            <button onClick={()=>locationChange('createjob')} className=\"bp3-button bp3-minimal bp3-icon-new-object\">Create Job</button>\r\n\r\n            <span className=\"bp3-navbar-divider\"></span>\r\n            \r\n            <button onClick={() => locationChange('profile')} title=\"profile\" className=\"bp3-button bp3-minimal bp3-icon-user\"></button>\r\n            <button className=\"bp3-button bp3-minimal bp3-icon-notifications\" title=\"notifications\"></button>\r\n            <button className=\"bp3-button bp3-minimal bp3-icon-cog\"></button>\r\n            <button onClick={() => setNotificationTab(!notificationTab)} className=\"bp3-button bp3-minimal bp3-icon-inbox-update bp3-intent-success\" title=\"inbox\"> </button>\r\n            \r\n            <button onClick={logout} className=\"bp3-button bp3-minimal bp3-icon-log-out\" title=\"logout\"></button>\r\n          </div>\r\n\r\n        </div>\r\n      </nav>\r\n\r\n      {\r\n        notificationTab ?\r\n          <div className=\"header-notification\">\r\n            <ul className=\"bp3-menu .modifier bp3-elevation-1\">\r\n              <li>\r\n               \r\n              </li>\r\n\r\n            </ul>\r\n          </div> : <div className=\"header-notification\">\r\n\r\n          </div>\r\n      }\r\n      { path ? <Redirect push to={`/${path}`} /> : null}\r\n      {logoutUser ? <Redirect push to=\"/\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\footer\\Footer.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Vocalists.js",["223"],"\r\nimport React, { useState, useContext, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Search from './Search'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport './Vocalist.css'\r\nimport { getVocalists } from '../helpers/vocalists.helper'\r\nimport Waveform from \"../waveform\";\r\nimport PianoPlay from '../piano'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Vocalists = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [selected, setSelected] = useState('genres')\r\n    let [vocalists, setVocalists] = useState([])\r\n    let [pageSize, setPageSize] = useState(1)\r\n    let [currentPage, setCurrentPage] = useState(1)\r\n    const [userdata,setUserData] = useState({})\r\n\r\n\r\n\r\n    let getVocalistsList = async () => {\r\n        let vocalistList = await getVocalists(user.token)\r\n        console.log(vocalistList)\r\n        setPageSize(Math.ceil(vocalistList.length === 0 ? (vocalistList.length + 1) / 2 : vocalistList.length / 2))\r\n        setVocalists(vocalistList)\r\n        dispatch({\r\n            type: 'VOCALISTS',\r\n            payload: vocalistList\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const changePage = (page) => {\r\n        switch (page) {\r\n            case 'prev':\r\n                setCurrentPage(currentPage - 1)\r\n                break;\r\n            case 'next':\r\n                setCurrentPage(currentPage + 1)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const setSearchData = (data) => {\r\n \r\n        setPageSize(1)\r\n        if (Object.keys(data).length === 0) {\r\n            setVocalists(user.vocalists)\r\n            setPageSize(Math.ceil(user.vocalists.length === 0 ? (user.vocalists.length + 1) / 2 : user.vocalists.length / 2))\r\n\r\n        } else {\r\n            let filterVocalists = user.vocalists.filter(v => {\r\n                for (let key in data) {\r\n                    if (!v[key].toLowerCase().includes(data[key].toLowerCase()))\r\n                        return false\r\n                }\r\n                return true\r\n            })\r\n\r\n            setVocalists(filterVocalists)\r\n            setPageSize(Math.ceil(filterVocalists.length === 0 ? filterVocalists.length + 1 / 2 : filterVocalists.length / 2))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            setUserData(result.data)\r\n            setLogin('success')\r\n            getVocalistsList()\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\"/>\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else if (!userdata.hasOwnProperty('id')) {\r\n        return (\r\n           <Redirect push to=\"/home\" />\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div className=\"vocalist-page-container\">\r\n                <Search search={setSearchData} />\r\n                <div style={{ marginLeft: '5%' }}>\r\n                    <div className=\"vocalists-container\">\r\n\r\n                        {vocalists.length > 0 ? vocalists.slice((currentPage - 1) * 2, currentPage * 2).map((vocalist, index) => <div key={index}>\r\n                            <blockquote className=\"bp3-blockquote bp3-card bp3-interactive each-vocalist\">\r\n                                <div className=\"each-vocalist-element\" style={{width:'100px'}}>\r\n                                    <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                                </div>\r\n                                <div className=\"each-vocalist-element\" style={{width:'500px'}} >\r\n                                    <Link to={`/profiles/${vocalist.id}`}> <h1 className=\"bp3-heading\">{vocalist.first_name} {vocalist.last_name} </h1></Link>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{vocalist.age}</span>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{vocalist.gender}</span>\r\n\r\n                                    <div className=\"bp3-tabs\">\r\n                                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                            <li onClick={() => panelSelect('genres')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'genres' ? true : false}>Genres</li>\r\n                                            <li onClick={() => panelSelect('microphones')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'microphones' ? true : false}>Microphone</li>\r\n                                            <li onClick={() => panelSelect('soundslike')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'soundslike' ? true : false}>Sounds like</li>\r\n                                        </ul>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'genres' ? false : true}>\r\n                                            {vocalist.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'microphones' ? false : true}>\r\n                                            {vocalist.microphone.split(',').map((m, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{m}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'soundslike' ? false : true}>\r\n                                            {vocalist.soundslike.split(',').map((s, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{s}</span>)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ marginTop: '3%'}} className=\"each-vocalist-element\">\r\n                                    {/* <button style={{marginTop:'7%',marginLeft:'10%',display:'block'}} type=\"button\" className=\"bp3-button\">Connect</button> */}\r\n\r\n\r\n                                    <Waveform url={vocalist.track_url} title={vocalist.track_title} />\r\n\r\n\r\n                                </div>\r\n\r\n                            </blockquote>\r\n                        </div>) : null}\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"pagination\">\r\n                        {/* {[...Array(pageSize)].map((p, i) => <span className=\"bp3-tag .modifier\">{i + 1}</span>)} */}\r\n\r\n                        {currentPage === 1 ? null : <span onClick={() => changePage('prev')} className=\"bp3-tag .modifier page-change\">previous page</span>}\r\n                        {currentPage === pageSize ? null : <span onClick={() => changePage('next')} className=\"bp3-tag .modifier page-change\">next page</span>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Vocalists","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Producers.js",["224"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getProducers } from '../helpers/producers.helper'\r\nimport Search from './Search'\r\nimport Waveform from \"../waveform\";\r\nimport './Producers.css'\r\nimport PianoPlay from '../piano'\r\n\r\n\r\n\r\n\r\nconst Producers = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [producers, setProducers] = useState([])\r\n    let [pageSize, setPageSize] = useState(1)\r\n    let [currentPage, setCurrentPage] = useState(1)\r\n    const [selected, setSelected] = useState('genres')\r\n    const [userdata, setUserData] = useState({})\r\n\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n\r\n    let getProducersList = async () => {\r\n        let producersList = await getProducers(user.token)\r\n\r\n        setPageSize(Math.ceil(producersList.length === 0 ? (producersList.length + 1) / 2 : producersList.length / 2))\r\n        setProducers(producersList)\r\n        dispatch({\r\n            type: 'PRODUCERS',\r\n            payload: producersList\r\n        })\r\n    }\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const changePage = (page) => {\r\n        switch (page) {\r\n            case 'prev':\r\n                setCurrentPage(currentPage - 1)\r\n                break;\r\n            case 'next':\r\n                setCurrentPage(currentPage + 1)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const setSearchData = (data) => {\r\n\r\n        setPageSize(1)\r\n        if (Object.keys(data).length === 0) {\r\n            setProducers(user.producers)\r\n            setPageSize(Math.ceil(user.producers.length === 0 ? (user.producers.length + 1) / 2 : user.producers.length / 2))\r\n\r\n        } else {\r\n            let filterProducers = user.producers.filter(p => {\r\n                for (let key in data) {\r\n                    if (!p[key].toLowerCase().includes(data[key].toLowerCase()))\r\n                        return false\r\n                }\r\n                return true\r\n            })\r\n\r\n            setProducers(filterProducers)\r\n            setPageSize(Math.ceil(filterProducers.length === 0 ? filterProducers.length + 1 / 2 : filterProducers.length / 2))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            setUserData(result.data)\r\n            setLogin('success')\r\n            getProducersList()\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n    else if (!userdata.hasOwnProperty('id')) {\r\n        return (\r\n            <Redirect push to=\"/home\" />\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"producer-page-container\">\r\n                <Search search={setSearchData} />\r\n                <div style={{ marginLeft: '5%' }}>\r\n                    <div className=\"producers-container\">\r\n\r\n                        {producers.length > 0 ? producers.slice((currentPage - 1) * 2, currentPage * 2).map((producer, index) => <div key={index}>\r\n                            <blockquote className=\"bp3-blockquote each-producer bp3-card bp3-interactive\">\r\n                                <div className=\"each-producer-element\" style={{ width: '100px' }}>\r\n                                    <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                                </div>\r\n                                <div className=\"each-producer-element\" style={{ width: '500px' }}>\r\n                                    <NavLink to={`/profiles/${producer.id}`}> <h1 className=\"bp3-heading\">{producer.first_name} {producer.last_name} </h1></NavLink>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{producer.age}</span>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{producer.gender}</span>\r\n\r\n                                    <div className=\"bp3-tabs\">\r\n                                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                            <li onClick={() => panelSelect('genres')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'genres' ? true : false}>Genres</li>\r\n                                            <li onClick={() => panelSelect('microphones')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'microphones' ? true : false}>Microphone</li>\r\n                                            <li onClick={() => panelSelect('soundslike')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'soundslike' ? true : false}>Sounds like</li>\r\n                                        </ul>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'genres' ? false : true}>\r\n                                            {producer.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'microphones' ? false : true}>\r\n                                            {producer.microphone.split(',').map((m, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{m}</span>)}\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'soundslike' ? false : true}>\r\n                                            {producer.soundslike.split(',').map((s, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{s}</span>)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ marginTop: '3%' }} >\r\n                                    {/* <button style={{marginTop:'7%',marginLeft:'10%',display:'block'}} type=\"button\" className=\"bp3-button\">Connect</button> */}\r\n\r\n\r\n                                    <Waveform url={producer.track_url} title={producer.track_title} />\r\n\r\n\r\n                                </div>\r\n\r\n                            </blockquote>\r\n                        </div>) : null}\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"pagination\">\r\n                        {/* {[...Array(pageSize)].map((p, i) => <span className=\"bp3-tag .modifier\">{i + 1}</span>)} */}\r\n\r\n                        {currentPage === 1 ? null : <span onClick={() => changePage('prev')} className=\"bp3-tag .modifier page-change\">previous page</span>}\r\n                        {currentPage === pageSize ? null : <span onClick={() => changePage('next')} className=\"bp3-tag .modifier page-change\">next page</span>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Producers","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Jobs.js",["225"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getGigs } from '../helpers/gig.helper'\r\nimport PianoPlay from '../piano'\r\nimport Search from './Search'\r\nimport Waveform from \"../waveform\";\r\nimport { Link } from 'react-router-dom'\r\nimport './Jobs.css'\r\n\r\n\r\nconst Jobs = () => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [gigs, setGigs] = useState([])\r\n    const [selected, setSelected] = useState('requirements')\r\n    let [pageSize, setPageSize] = useState(1)\r\n    let [currentPage, setCurrentPage] = useState(1)\r\n    const [userdata,setUserData] = useState({})\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n\r\n    const setSearchData = (data) => {\r\n        setPageSize(1)\r\n        if (Object.keys(data).length === 0) {\r\n            setGigs(user.gigs)\r\n            setPageSize(Math.ceil(user.gigs.length === 0 ? (user.gigs.length + 1) / 2 : user.gigs.length / 2))\r\n\r\n        } else {\r\n            let filterJobs = user.gigs.filter(g => {\r\n                for (let key in data) {\r\n                    if (!g[key].toLowerCase().includes(data[key].toLowerCase()))\r\n                        return false\r\n                }\r\n                return true\r\n            })\r\n\r\n            setGigs(filterJobs)\r\n            setPageSize(Math.ceil(filterJobs.length === 0 ? filterJobs.length + 1 / 2 : filterJobs.length / 2))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const changePage = (page) => {\r\n        switch (page) {\r\n            case 'prev':\r\n                setCurrentPage(currentPage - 1)\r\n                break;\r\n            case 'next':\r\n                setCurrentPage(currentPage + 1)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        let result = await requestCurrentUser(user.token)\r\n        console.log(result)\r\n        if (result.status) {\r\n            console.log(result)\r\n\r\n            let gigs = await getGigs(result.data.type, result.data.gender, user.token)\r\n            setPageSize(Math.ceil(gigs.length === 0 ? (gigs.length + 1) / 2 : gigs.length / 2))\r\n            console.log(gigs)\r\n            setGigs(gigs)\r\n            dispatch({\r\n                type: \"GIGS\",\r\n                payload: gigs\r\n            })\r\n            setUserData(result.data)\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n\r\n    else if (!userdata.hasOwnProperty('id')) {\r\n        return (\r\n           <Redirect push to=\"/home\" />\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div className=\"job-page-container\">\r\n                <Search search={setSearchData} />\r\n                <div style={{ marginLeft: '5%' }}>\r\n                    <div className=\"jobs-container\">\r\n\r\n                        {gigs.length > 0 ? gigs.slice((currentPage - 1) * 2, currentPage * 2).map((gig, index) => <div key={index}>\r\n                            <blockquote className=\"bp3-blockquote bp3-card bp3-interactive each-job\">\r\n                                <div className=\"each-job-element\">\r\n                                    {/* <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" /> */}\r\n                                </div>\r\n                                <div className=\"each-job-element\" style={{ width: '500px' }}>\r\n                                    <Link to={`/gigs/${gig.id}`}> <h1 className=\"bp3-heading\">{gig.name}</h1></Link>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{gig.bpm}</span>\r\n                                    <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{gig.genre}</span>\r\n\r\n                                    <div className=\"bp3-tabs\">\r\n                                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                            <li onClick={() => panelSelect('requirements')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'requirements' ? true : false}>Requirements</li>\r\n                                            <li onClick={() => panelSelect('language')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'language' ? true : false}>Language</li>\r\n                                            <li onClick={() => panelSelect('budget')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'budget' ? true : false}>Budget</li>\r\n                                        </ul>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'requirements' ? false : true}>\r\n                                            <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{gig.requirements.substring(0, 30)}...</span>\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'language' ? false : true}>\r\n                                            <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{gig.language}</span>\r\n                                        </div>\r\n                                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'budget' ? false : true}>\r\n                                            <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{gig.budgetMin}-{gig.budgetMax} USD</span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ marginTop: '3%' }} >\r\n                                    {/* <button style={{marginTop:'7%',marginLeft:'10%',display:'block'}} type=\"button\" className=\"bp3-button\">Connect</button> */}\r\n\r\n\r\n                                    <Waveform url={gig.track_url} title={gig.name} />\r\n\r\n\r\n                                </div>\r\n\r\n                            </blockquote>\r\n                        </div>) : null}\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"pagination\">\r\n                        {currentPage === 1 ? null : <span onClick={() => changePage('prev')} className=\"bp3-tag .modifier page-change\">previous page</span>}\r\n                        {currentPage === pageSize ? null : <span onClick={() => changePage('next')} className=\"bp3-tag .modifier page-change\">next page</span>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Jobs","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\utils\\common.utils.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\vocalists.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\waveform\\Waveform.js",["226"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport WaveSurfer from \"wavesurfer.js\";\r\n\r\nimport './Waveform.css'\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\nconst formWaveSurferOptions = ref => ({\r\n  container: ref,\r\n  waveColor: \"#eee\",\r\n  progressColor: \"OrangeRed\",\r\n  cursorColor: \"OrangeRed\",\r\n  barWidth: 4,\r\n  barRadius: 3,\r\n  responsive: true,\r\n  height: 120,\r\n  // If true, normalize by the maximum peak instead of 1.0.\r\n  normalize: true,\r\n  // Use the PeakCache to improve rendering speed of large waveforms.\r\n  partialRender: true\r\n});\r\n\r\nexport default function Waveform({ url,title }) {\r\n  const waveformRef = useRef(null);\r\n  var wavesurfer = useRef(null);\r\n  const [playing, setPlay] = useState(false);\r\n  const [volume, setVolume] = useState(0.5);\r\n\r\n  // create new WaveSurfer instance\r\n  // On component mount and when url changes\r\n  useEffect(() => {\r\n    setPlay(false);\r\n\r\n    const options = formWaveSurferOptions(waveformRef.current);\r\n    wavesurfer.current = WaveSurfer.create(options);\r\n    wavesurfer.current.load(url);\r\n\r\n    wavesurfer.current.on(\"ready\", function () {\r\n      // https://wavesurfer-js.org/docs/methods.html\r\n      // wavesurfer.current.play();\r\n      // setPlay(true);\r\n\r\n      // make sure object stillavailable when file loaded\r\n      if (wavesurfer.current) {\r\n        wavesurfer.current.setVolume(volume);\r\n        setVolume(volume);\r\n      }\r\n    });\r\n    // Removes events, elements and disconnects Web Audio nodes.\r\n    // when component unmount\r\n    return () => wavesurfer.current.destroy();\r\n  }, [url]);\r\n\r\n  const handlePlayPause = () => {\r\n    setPlay(!playing);\r\n    wavesurfer.current.playPause();\r\n  };\r\n\r\n\r\n  const onVolumeChange = e => {\r\n    const { target } = e;\r\n    const newVolume = +target.value;\r\n\r\n    if (newVolume) {\r\n      setVolume(newVolume);\r\n      wavesurfer.current.setVolume(newVolume || 1);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n    <h5 className=\"bp3-heading\">{title}</h5>\r\n      <div id=\"waveform\" ref={waveformRef} />\r\n      <div className=\"controls\">\r\n      <button onClick={handlePlayPause} type=\"button\" className={`bp3-button ${!playing ? \"bp3-icon-play\" : \"bp3-icon-pause\"}`}></button>\r\n      \r\n    <input \r\n      className=\"controls-volume\"\r\n      type=\"range\"\r\n      id=\"volume\"\r\n      name=\"volume\"\r\n      // waveSurfer recognize value of `0` same as `1`\r\n      //  so we need to set some zero-ish value for silence\r\n      min=\"0.01\"\r\n      max=\"1\"\r\n      step=\".025\"\r\n      onChange={onVolumeChange}\r\n      defaultValue={volume}\r\n    />\r\n    \r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\vocalists\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\producers.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\producers\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\profile\\Profile.js",["227"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Profile.css'\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\nconst Profile = () => {\r\n\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [selected, setSelected] = useState('video')\r\n    let [section, setSection] = useState()\r\n    const [userdata,setUserData] = useState()\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    let checkCurrentUser = async () => {\r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            setUserData(result.data)\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n\r\n    else if (!userdata.hasOwnProperty('id')) {\r\n        return (\r\n           <Redirect push to=\"/home\" />\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"profile-section\">\r\n                <div onMouseEnter={() => setSection(1)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 1 ? '4' : '2'} .modifier profile-section-one`}>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                    </div>\r\n\r\n                    <h1 className=\"bp3-heading profile-section-one-each\">{user.user.first_name} {user.user.last_name}</h1>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{user.user.age}</span>\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{user.user.gender}</span>\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        Sounds like: {user.user.soundslike.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Microphones: {user.user.microphone.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Genres: {user.user.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Country: <span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{user.user.country}</span>\r\n                    City: <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{user.user.city}</span>\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Raiting: {user.user.raiting === null ? <span className=\"bp3-tag\">No reviews yet</span> : <span\r\n                            className={`bp3-tag bp3-intent-${parseFloat(user.user.raiting) <= 3 ? 'danger' :\r\n                                parseFloat(user.user.raiting) > 4 ? 'success' : 'warning'}`}>{user.user.raiting}</span>}\r\n                    </div>\r\n                </div>\r\n                <div onMouseEnter={() => setSection(2)} onMouseLeave={() => setSection(0)} className={`bp3-card bp3-elevation-${section === 2 ? '4' : '2'} .modifier profile-section-two`}>\r\n                    <div className=\"profile-section-two-each\">\r\n                        <Waveform url={user.user.track_url} title={user.user.track_title} />\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-two-each\">\r\n                        <span className=\"bp3-tag\">About</span> {user.user.about}\r\n                    </div>\r\n\r\n                    <div className=\"bp3-tabs profile-section-two-each\">\r\n                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                            <li onClick={() => setSelected('video')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'video' ? true : false}>Video</li>\r\n                            <li onClick={() => setSelected('review')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'review' ? true : false}>Reviews</li>\r\n                            <li onClick={() => setSelected('connection')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'connection' ? true : false}>Connections</li>\r\n                        </ul>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'video' ? false : true}>\r\n                            <iframe title=\"video\" width=\"560\" height=\"315\" src={user.user.youtube_link} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                        </div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'review' ? false : true}>Reviews</div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'connection' ? false : true}>Connections</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Profile","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\piano\\Piano.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachprofile\\EachProfile.js",["228"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport {getUserByID} from '../helpers/profile.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\n\r\nconst EachProfile = (props) => {\r\n\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    let [selected, setSelected] = useState('video')\r\n    let [section,setSection] = useState()\r\n    let [viewUser,setViewUser] = useState()\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n    let checkCurrentUser = async () => {\r\n       \r\n\r\n        \r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            console.log(props)\r\n            let viewedUser = await getUserByID(props.match.params.id,user.token)\r\n            console.log(viewedUser)\r\n            if(viewedUser){\r\n                setViewUser(viewedUser)\r\n                setLogin('success')\r\n            } else{\r\n                setLogin('waiting')\r\n            }\r\n            \r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    \r\n    else if (!viewUser.hasOwnProperty('id')) {\r\n       props.history.goBack()\r\n        return (\r\n            <p></p>\r\n        )\r\n    }\r\n    else {\r\n      \r\n        return (\r\n            <div className=\"profile-section\">\r\n                <div onMouseEnter={()=>setSection(1)} onMouseLeave={()=>setSection(0)} className={`bp3-card bp3-elevation-${section === 1? '4':'2'} .modifier profile-section-one`}>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <img alt=\"user\" style={{ width: '100px' }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                    </div>\r\n\r\n                    <h1 className=\"bp3-heading profile-section-one-each\">{viewUser.first_name} {viewUser.last_name}</h1>\r\n                    <div className=\"profile-section-one-each\">\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.age}</span>\r\n                        <span style={{ marginLeft: '1%' }} className=\"bp3-tag .modifier\">{viewUser.gender}</span>\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-one-each\">\r\n                        Sounds like: {viewUser.soundslike.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Microphones: {viewUser.microphone.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Genres: {viewUser.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Country: <span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewUser.country}</span>\r\n                    City: <span style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{viewUser.city}</span>\r\n                    </div>\r\n                    <div className=\"profile-section-one-each\">\r\n                        Raiting: {viewUser.raiting === null ? <span className=\"bp3-tag\">No reviews yet</span> : <span\r\n                            className={`bp3-tag bp3-intent-${parseFloat(viewUser.raiting) <= 3 ? 'danger' :\r\n                                parseFloat(viewUser.raiting) > 4 ? 'success' : 'warning'}`}>{viewUser.raiting}</span>}\r\n                    </div>\r\n                </div>\r\n                <div onMouseEnter={()=>setSection(2)} onMouseLeave={()=>setSection(0)} className={`bp3-card bp3-elevation-${section === 2? '4':'2'} .modifier profile-section-two`}>\r\n                    <div className=\"profile-section-two-each\">\r\n                        <Waveform url={viewUser.track_url} title={viewUser.track_title} />\r\n                    </div>\r\n\r\n                    <div className=\"profile-section-two-each\">\r\n                        <span className=\"bp3-tag\">About</span> {viewUser.about}\r\n                    </div>\r\n\r\n                    <div className=\"bp3-tabs profile-section-two-each\">\r\n                        <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                            <li onClick={() => setSelected('video')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'video' ? true : false}>Video</li>\r\n                            <li onClick={() => setSelected('review')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'review' ? true : false}>Reviews</li>\r\n                            <li onClick={() => setSelected('connection')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'connection' ? true : false}>Connections</li>\r\n                        </ul>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'video' ? false : true}>\r\n                            <iframe title=\"video\" width=\"560\" height=\"315\" src={viewUser.youtube_link} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                        </div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'review' ? false : true}>Reviews</div>\r\n                        <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'connection' ? false : true}>Connections</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default EachProfile","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\profile.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\gig.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\Jobs\\Search.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\eachgig\\EachGig.js",["229"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport UserContext from '../../contexts/user.context'\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getGigByID, getGigBiddings, removeBid, submitBid, closeGigByID, awardGigByID, getBidExist } from '../helpers/gig.helper'\r\nimport { Redirect } from 'react-router-dom';\r\nimport Waveform from '../waveform'\r\nimport PianoPlay from '../piano'\r\nimport './EachGig.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Utils from '../utils/common.utils'\r\n\r\nconst EachGig = (props) => {\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [login, setLogin] = useState('waiting')\r\n    const [viewedGig, setViewGig] = useState()\r\n    const [bidError, setBidError] = useState('')\r\n    const [bidExist, setBidExist] = useState(false)\r\n    const [biddings, setBiddings] = useState([])\r\n    const [userBid, setUserBid] = useState()\r\n    const bidRef = React.createRef()\r\n    const [selected, setSelected] = useState('genres')\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser() \r\n    },[])\r\n\r\n    const panelSelect = (type) => {\r\n        setSelected(type)\r\n    }\r\n\r\n    const handleBid = async () => {\r\n\r\n        setBidError('')\r\n        if (bidRef.current.value > viewedGig.budgetMax) {\r\n            setBidError('max')\r\n        } else if (bidRef.current.value < viewedGig.budgetMin) {\r\n            setBidError('min')\r\n        } else {\r\n            setBidError('')\r\n            let refresh = await handleRefreshBid()\r\n            let bidExist = await getBidExist(user.user.id, user.token)\r\n\r\n            if (bidExist) {\r\n                setBiddings(refresh)\r\n            } else {\r\n                let bid = {\r\n                    gig_id: viewedGig.id,\r\n                    user_id: user.user.id,\r\n                    amount: bidRef.current.value,\r\n                    full_name: `${user.user.first_name} ${user.user.last_name}`,\r\n                    track_url: user.user.track_url,\r\n                    track_title: user.user.track_title,\r\n                    soundslike: user.user.soundslike\r\n                }\r\n\r\n                let result = await submitBid(bid, user.token)\r\n\r\n                if (result) {\r\n                    window.location.reload(true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleRefreshGig = async () => {\r\n        let result = false;\r\n        let viewedGig = await getGigByID(props.match.params.id, user.token)\r\n        if (viewedGig) {\r\n            result = viewedGig\r\n        }\r\n        return result\r\n    }\r\n\r\n    const closeGig = async () => {\r\n        let refresh = await handleRefreshGig()\r\n        if (refresh) {\r\n            if (refresh.active === 0) {\r\n                setViewGig(refresh)\r\n            } else {\r\n\r\n                let result = await closeGigByID(viewedGig.id, user.token)\r\n                if (result) {\r\n                    let updatedGig = { ...viewedGig, active: 0 }\r\n                    setViewGig(updatedGig)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const awardGig = async (user_id) => {\r\n        let refresh = await handleRefreshGig()\r\n        if (refresh) {\r\n            if (viewedGig.active === 2) {\r\n                console.log(\"ora\")\r\n                setViewGig(refresh)\r\n            } else {\r\n\r\n                let result = await awardGigByID(viewedGig.id, user_id, user.token)\r\n                if (result) {\r\n                    console.log(\"bura\")\r\n                    console.log(viewedGig.awardedUser)\r\n                    let updatedGig = { ...viewedGig, active: 2, awardedUser: user_id }\r\n                    setViewGig(updatedGig)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleRefreshBid = async () => {\r\n        let result = false;\r\n        let biddings = await getGigBiddings(props.match.params.id, user.token)\r\n        if (biddings) {\r\n            result = biddings\r\n        }\r\n        return result\r\n\r\n    }\r\n\r\n\r\n\r\n    const handleRemove = async (bid) => {\r\n        let refresh = await handleRefreshBid()\r\n        let bidExist = await getBidExist(bid.user_id, user.token)\r\n        if (refresh) {\r\n            if (bidExist) {\r\n                if (bid.user_id === user.user.id) {\r\n                    console.log(bid.id)\r\n                    let result = await removeBid(bid.id, user.token)\r\n                    if (result) {\r\n                        window.location.reload()\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                console.log(\"already removed\")\r\n                setBiddings(refresh)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        setBidExist(false)\r\n        console.log(user.token)\r\n        let result = await requestCurrentUser(user.token)\r\n        console.log(result)\r\n        if (result.status) {\r\n            await dispatch({\r\n                type: \"USER\",\r\n                payload: result.data\r\n            })\r\n            console.log(props)\r\n            let viewedGig = await getGigByID(props.match.params.id, user.token)\r\n            let biddings = await getGigBiddings(props.match.params.id, user.token)\r\n            console.log(result.data)\r\n\r\n            console.log(viewedGig)\r\n            if (viewedGig) {\r\n                setViewGig(viewedGig)\r\n                setBiddings(biddings)\r\n                let userBid = false;\r\n                console.log(biddings)\r\n                if (biddings) {\r\n                    userBid = biddings.find(x => x.user_id === result.data.id)\r\n                }\r\n                console.log(userBid)\r\n                if (userBid) {\r\n                    setBidExist(true)\r\n                    setUserBid(userBid)\r\n                } else {\r\n                    setBidExist(false)\r\n                }\r\n                setLogin('success')\r\n            } else {\r\n                setLogin('waiting')\r\n            }\r\n\r\n        } else {\r\n            setLogin('failed')\r\n            \r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={400} />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n\r\n        )\r\n    }\r\n    else if (!viewedGig.hasOwnProperty('id')) {\r\n        return (\r\n            <Redirect push to=\"/jobs\" />\r\n        )\r\n    }\r\n    else {\r\n\r\n        return (\r\n            <div className=\"gig-container\">\r\n                <div className=\"bp3-card each-gig-container\">\r\n                    <div className=\"each-gig-element\">\r\n                        <h1 className=\"bp3-heading\">{viewedGig.name}</h1>\r\n                        <span className={`bp3-tag bp3-intent-${viewedGig.active === 1 ? 'warning' : viewedGig.active === 2 ? 'success' : 'danger'}`}>\r\n                            {viewedGig.active === 1 ? 'active' : viewedGig.active === 2 ? 'Awarded' : 'Closed'}</span>\r\n\r\n                    </div>\r\n                    {viewedGig.active === 1 ? <button onClick={closeGig} style={{ width: \"10%\" }} className=\"bp3-button bp3-intent-danger bp3-outlined bp3-small\">Close</button> : null}\r\n                    <div className=\"each-gig-element\">\r\n                        <Waveform url={viewedGig.track_url} title={viewedGig.name} />\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Created date:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{new Date(viewedGig.createDate).toLocaleDateString(\"sq-AL\", { year: 'numeric', month: '2-digit', day: '2-digit' })}</span>\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Looking for:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.type === 'V' ? 'vocalist' : 'producer'}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Language:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.language}</span>\r\n                    Genre:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.genre}</span>\r\n                    BPM:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.bpm}</span>\r\n                    </div>\r\n                    <div className=\"each-gig-element\">\r\n                        Created by:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.createdBy}</span>\r\n                    Budget:<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className={`bp3-tag .modifier bp3-intent-${bidError === 'min' ? 'danger' : 'success'}`}>{viewedGig.budgetMin}</span>\r\n                    -<span style={{ marginLeft: '1%', marginBottom: '1%', marginRight: '1%' }} className={`bp3-tag .modifier bp3-intent-${bidError === 'max' ? 'danger' : 'success'}`}>{viewedGig.budgetMax}</span>{Utils.currency}\r\n                    </div>\r\n\r\n                    <div className=\"each-gig-element\">\r\n                        Requirements:<p></p><span style={{ marginBottom: '1%', marginRight: '1%' }} className=\"bp3-tag .modifier\">{viewedGig.requirements}</span>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"bp3-card bid-area\">\r\n\r\n                    {bidExist ? <div>\r\n                        Your bid is: <span className=\"bp3-tag\">{userBid.amount}</span>\r\n                    </div> : viewedGig.user_id === user.user.id || viewedGig.active !== 1 ? null : <div>\r\n                        <input ref={bidRef} className=\"bp3-input bp3-intent-primary bp3-large  .modifier\" type=\"number\" placeholder=\"Your bid\" dir=\"auto\" />\r\n                        <button onClick={handleBid} style={{ marginLeft: '1%' }} type=\"button\" className=\"bp3-button bp3-intent-success bp3-large .modifier\">Submit</button>\r\n                    </div>}\r\n                </div>\r\n\r\n                <div className=\"bp3-card bid-area\">\r\n                    {biddings.length > 0 ? biddings.map((bid, index) => <div key={index}>\r\n                        <blockquote className=\"bp3-blockquote each-bid bp3-card bp3-interactive\" >\r\n\r\n\r\n                            <div className=\"each-bid-element\">\r\n                                <div style={{ textAlign: 'center' }}> <span className=\"bp3-tag \" >{bid.amount} {Utils.currency}</span></div>\r\n                                <img alt=\"user\" style={{ width: '100px', padding: \"5%\" }} src=\"https://www.mountainheavensella.com/wp-content/uploads/2018/12/default-user.png\" />\r\n                                {viewedGig.awardedUser === user.user.id ? <div style={{ marginTop: '7%', textAlign: \"center\" }}><span className={`bp3-tag bp3-intent-success`}>Successfull bid</span></div> : null}\r\n                                {bidExist && bid.user_id === user.user.id && viewedGig.user_id !== user.user.id && viewedGig.active === 1 ? <div style={{ textAlign: \"center\" }}><button onClick={() => handleRemove(bid)} className=\"bp3-button bp3-intent-danger remove-bid\">remove Bid</button></div> : null}\r\n                                {viewedGig.user_id === user.user.id && viewedGig.active === 1 ? <div style={{ textAlign: \"center\" }}><button onClick={() => awardGig(bid.user_id)} className=\"bp3-button bp3-intent-success remove-bid\">Award Gig</button></div> : null}\r\n                            </div>\r\n                            <div className=\"each-bid-element\" style={{ width: '250px' }}>\r\n                                <NavLink to={`/profiles/${bid.user_id}`}> <h1 className=\"bp3-heading\">{bid.full_name} </h1></NavLink>\r\n\r\n                                <div className=\"bp3-tabs\">\r\n                                    <ul className=\"bp3-tab-list .modifier\" role=\"tablist\">\r\n                                        <li onClick={() => panelSelect('genres')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'genres' ? true : false}>Genres</li>\r\n                                        <li onClick={() => panelSelect('microphones')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'microphones' ? true : false}>Microphone</li>\r\n                                        <li onClick={() => panelSelect('soundslike')} className=\"bp3-tab\" role=\"tab\" aria-selected={selected === 'soundslike' ? true : false}>Sounds like</li>\r\n                                    </ul>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'genres' ? false : true}>\r\n                                        {bid.genres.split(',').map((g, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{g}</span>)}\r\n                                    </div>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'microphones' ? false : true}>\r\n                                        {bid.microphone.split(',').map((m, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{m}</span>)}\r\n                                    </div>\r\n                                    <div className=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden={selected === 'soundslike' ? false : true}>\r\n                                        {bid.soundslike.split(',').map((s, i) => <span key={i} style={{ marginLeft: '1%', marginBottom: '1%' }} className=\"bp3-tag .modifier\">{s}</span>)}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"each-bid-element\" style={{ marginTop: '0%' }}>\r\n                                <Waveform url={bid.track_url} title={bid.track_title} className=\"bid-waveform\" />\r\n\r\n                            </div>\r\n                            <div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </blockquote>\r\n                    </div>) : null}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default EachGig","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\nomatch\\NoMatch.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\createjob\\CreateJob.js",["230","231"],"import React, { useState, useRef, useEffect, useContext } from 'react'\r\nimport { requestCurrentUser } from '../helpers/auth.helper'\r\nimport { getLanguages, getGenres } from '../helpers/common.helper'\r\nimport { createGig } from '../helpers/gig.helper'\r\nimport UserContext from '../../contexts/user.context';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PianoPlay from '../piano'\r\nimport './CreateJob.css'\r\n\r\n\r\nlet CreateJob = () => {\r\n\r\n    const gigname = useRef()\r\n    const budgetMin = useRef()\r\n    const budgetMax = useRef()\r\n    const gender = useRef()\r\n    const type = useRef()\r\n    const track_url = useRef()\r\n    const bpm = useRef()\r\n    const requirements = useRef()\r\n    const language = useRef()\r\n    const genre = useRef()\r\n\r\n    const [user, dispatch] = useContext(UserContext)\r\n    const [userdata, setUserData] = useState({})\r\n    const [login, setLogin] = useState('waiting')\r\n    const [languages, setLanguages] = useState([])\r\n    const [genres, setGenres] = useState([])\r\n    const [created, setCreated] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState()\r\n\r\n    useEffect(() => {\r\n        checkCurrentUser()\r\n    }, [])\r\n\r\n\r\n    function formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n\r\n        if (month.length < 2)\r\n            month = '0' + month;\r\n        if (day.length < 2)\r\n            day = '0' + day;\r\n\r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    function addDays(date, days) {\r\n        const copy = new Date(Number(date))\r\n        copy.setDate(date.getDate() + days)\r\n        return copy\r\n    }\r\n\r\n\r\n    const handleGigCreate = async (e) => {\r\n        e.preventDefault()\r\n        setError(false)\r\n        let date = new Date()\r\n\r\n        let data = {\r\n            user_id: userdata.id,\r\n            name: gigname.current.value,\r\n            expireDate: formatDate(addDays(date, 15)),\r\n            createDate: formatDate(date),\r\n            budgetMin: budgetMin.current.value,\r\n            budgetMax: budgetMax.current.value,\r\n            gender: gender.current.value,\r\n            type: type.current.value,\r\n            track_url: track_url.current.value,\r\n            bpm: bpm.current.value,\r\n            requirements: requirements.current.value,\r\n            genre: genre.current.value,\r\n            language: language.current.value,\r\n            createdBy: userdata.first_name + '' + userdata.last_name\r\n        }\r\n\r\n\r\n        let result = await createGig(data, user.token)\r\n\r\n        if (result) {\r\n            setCreated(true)\r\n        } else {\r\n            setErrorMessage('Please try again later')\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    let checkCurrentUser = async () => {\r\n        let result = await requestCurrentUser(user.token)\r\n        let languages = await getLanguages()\r\n        let genres = await getGenres()\r\n        if (result.status) {\r\n            setLanguages(languages)\r\n            setGenres(genres)\r\n            setUserData(result.data)\r\n            setLogin('success')\r\n        } else {\r\n            setLogin('failed')\r\n        }\r\n    }\r\n\r\n    if (login === 'waiting') {\r\n        return (\r\n            <PianoPlay width={300} classAdd=\"loading\" />\r\n        )\r\n    }\r\n    else if (login === 'failed') {\r\n        return (\r\n            <Redirect push to=\"/\" />\r\n        )\r\n    }\r\n    else if (!userdata.hasOwnProperty('id')) {\r\n        return (\r\n            <Redirect push to=\"/home\" />\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n\r\n            <div className=\"createjob-container\">\r\n                {created ? <Redirect push to=\"/jobs\" /> : null}\r\n                <form onSubmit={handleGigCreate}>\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        <input ref={gigname} type={\"text\"} maxLength={20} minLength={6} className=\"bp3-input\" placeholder=\"Enter gig name...\" autoComplete=\"on\" required />\r\n                        <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-user .modifier`}></button>\r\n                    </div>\r\n\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        <input ref={bpm} type={\"number\"} max=\"1015\" min=\"60\" className=\"bp3-input\" placeholder=\"BPM...\" autoComplete=\"on\" required />\r\n                        <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-numerical .modifier`}></button>\r\n                    </div>\r\n\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        <input ref={budgetMin} type={\"number\"} className=\"bp3-input\" placeholder=\"Budget min...\" min=\"20\" max=\"100\" autoComplete=\"on\" required />\r\n                        <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-dollar .modifier`}></button>\r\n                    </div>\r\n\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        <input ref={budgetMax} type={\"number\"} className=\"bp3-input\" placeholder=\"Budget max...\" min=\"100\" max=\"1000\" autoComplete=\"on\" required />\r\n                        <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-dollar .modifier`}></button>\r\n                    </div>\r\n\r\n                    <div className=\"bp3-select .modifier createjob-general\">\r\n                        <select ref={gender} required>\r\n                            <option value=\"\">Gender...</option>\r\n                            <option value=\"M\">Male</option>\r\n                            <option value=\"F\">Female</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"bp3-select .modifier createjob-general\">\r\n                        <select defaultValue=\"\" ref={type} required>\r\n                            <option value=\"\">Type...</option>\r\n\r\n                            {userdata.type === \"P\" || userdata.type === \"VP\" ? <option value=\"V\">Vocalist</option> : null}\r\n                            {userdata.type === \"V\" || userdata.type === \"VP\" ? <option value=\"P\">Producer</option> : null}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        <input ref={track_url} type={\"text\"} maxLength={500} className=\"bp3-input\" placeholder=\"Track url...{example:http//:music.mp3}\" autoComplete=\"on\" required />\r\n                        <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-music .modifier`}></button>\r\n                    </div>\r\n\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        <textarea ref={requirements} className=\"bp3-input .modifier\" dir=\"auto\" placeholder=\"Requirements...\" required></textarea>\r\n                    </div>\r\n\r\n\r\n                    {languages.length > 0 ? <div className=\"bp3-select .modifier createjob-general\">\r\n                        <select ref={language} required>\r\n                            {languages.map((l, i) => <option key={i} value={l}>{l}</option>)}\r\n                        </select>\r\n                    </div> : null}\r\n\r\n                    {genres.length > 0 ? <div className=\"bp3-select .modifier createjob-general\">\r\n                        <select ref={genre} required>\r\n                            {genres.map((l, i) => <option key={i} value={l}>{l}</option>)}\r\n                        </select>\r\n                    </div> : null}\r\n\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        {error ? <p className=\"register-general register-error\"><i className=\"bp3-icon-error\"></i> {errorMessage}</p> : null}\r\n                    </div>\r\n\r\n                    <div className=\"bp3-input-group .modifier createjob-general\">\r\n                        <button className=\"bp3-button bp3-intent-success\">Create</button>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                </form>\r\n\r\n\r\n                {/* <div className=\"bp3-input-group .modifier createjob-general\">\r\n                <input ref={username} type={\"text\"} className=\"bp3-input\" placeholder=\"Enter your username...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-user .modifier`}></button>\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier createjob-general\">\r\n                <input ref={email} type={\"email\"} className=\"bp3-input\" placeholder=\"Enter your email...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-envelope .modifier`}></button>\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier createjob-general\">\r\n                <input ref={first_name} type={\"text\"} className=\"bp3-input\" placeholder=\"Enter your first name...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-user .modifier`}></button>\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier createjob-general\">\r\n                <input ref={last_name} type={\"text\"} className=\"bp3-input\" placeholder=\"Enter your last name...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-user .modifier`}></button>\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier createjob-general\">\r\n                <input ref={age} type={\"number\"} className=\"bp3-input\" placeholder=\"Enter your last age...\" autoComplete=\"on\" />\r\n                <button className={`bp3-button bp3-minimal bp3-intent-warning bp3-icon-user .modifier`}></button>\r\n            </div>\r\n     \r\n\r\n            <div className=\"bp3-select .modifier createjob-general\">\r\n                <select ref={type}>\r\n                    <option selected value=\"\">Type...</option>\r\n                    <option value=\"V\">Vocalist</option>\r\n                    <option value=\"P\">Producer</option>\r\n                    <option value=\"VP\">Both</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"bp3-input-group .modifier createjob-general\">\r\n                <input ref={password}  type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Enter your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n           \r\n            <div className=\"bp3-input-group .modifier createjob-general\">\r\n                <input ref={confirm_password} type={passwordShow ? \"text\" : \"password\"} className=\"bp3-input\" placeholder=\"Confirm your password...\" autoComplete=\"on\" />\r\n                <button onClick={showPassword} className={`bp3-button bp3-minimal bp3-intent-warning ${passwordShow ? 'bp3-icon-unlock' : 'bp3-icon-lock'} .modifier`}></button>\r\n            </div>\r\n\r\n\r\n            <button type=\"button\" onClick={signup} className={`bp3-button .modifier login-general ${error? 'bp3-intent-danger':'bp3-intent-success'}`}>Sign up</button>\r\n\r\n            {error? <p className=\"createjob-general createjob-error\"><i className=\"bp3-icon-error\"></i> {errorMessage}</p>:null} */}\r\n                {/* {success ? <Redirect push to=\"/\" /> : null} */}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateJob","C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\helpers\\common.helper.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\gigcenter\\GigCenter.js",["232","233"],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\index.js",[],"C:\\Users\\User\\Documents\\GitHub\\vocalriserfrontend\\vocalriser\\src\\components\\awardedgig\\AwardedGig.js",["234"],{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"240","line":17,"column":12,"nodeType":"241","messageId":"242","endLine":17,"endColumn":16},{"ruleId":"239","severity":1,"message":"243","line":9,"column":18,"nodeType":"241","messageId":"242","endLine":9,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":15,"column":8,"nodeType":"246","endLine":15,"endColumn":10,"suggestions":"247"},{"ruleId":"239","severity":1,"message":"248","line":1,"column":8,"nodeType":"241","messageId":"242","endLine":1,"endColumn":13},{"ruleId":"239","severity":1,"message":"249","line":1,"column":16,"nodeType":"241","messageId":"242","endLine":1,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":11,"column":10,"nodeType":"241","messageId":"242","endLine":11,"endColumn":14},{"ruleId":"244","severity":1,"message":"245","line":39,"column":8,"nodeType":"246","endLine":39,"endColumn":10,"suggestions":"250"},{"ruleId":"244","severity":1,"message":"245","line":26,"column":8,"nodeType":"246","endLine":26,"endColumn":10,"suggestions":"251"},{"ruleId":"244","severity":1,"message":"245","line":24,"column":8,"nodeType":"246","endLine":24,"endColumn":10,"suggestions":"252"},{"ruleId":"244","severity":1,"message":"253","line":52,"column":6,"nodeType":"246","endLine":52,"endColumn":11,"suggestions":"254"},{"ruleId":"244","severity":1,"message":"245","line":19,"column":8,"nodeType":"246","endLine":19,"endColumn":10,"suggestions":"255"},{"ruleId":"244","severity":1,"message":"245","line":19,"column":8,"nodeType":"246","endLine":19,"endColumn":10,"suggestions":"256"},{"ruleId":"244","severity":1,"message":"245","line":25,"column":7,"nodeType":"246","endLine":25,"endColumn":9,"suggestions":"257"},{"ruleId":"239","severity":1,"message":"243","line":24,"column":18,"nodeType":"241","messageId":"242","endLine":24,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":35,"column":8,"nodeType":"246","endLine":35,"endColumn":10,"suggestions":"258"},{"ruleId":"239","severity":1,"message":"243","line":12,"column":18,"nodeType":"241","messageId":"242","endLine":12,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":22,"column":8,"nodeType":"246","endLine":22,"endColumn":10,"suggestions":"259"},{"ruleId":"244","severity":1,"message":"245","line":18,"column":8,"nodeType":"246","endLine":18,"endColumn":10,"suggestions":"260"},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["263"],"'React' is defined but never used.","'useContext' is defined but never used.",["264"],["265"],["266"],"React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.",["267"],["268"],["269"],["270"],["271"],["272"],["273"],"no-global-assign","no-unsafe-negation",{"desc":"274","fix":"275"},{"desc":"274","fix":"276"},{"desc":"274","fix":"277"},{"desc":"274","fix":"278"},{"desc":"279","fix":"280"},{"desc":"274","fix":"281"},{"desc":"274","fix":"282"},{"desc":"274","fix":"283"},{"desc":"274","fix":"284"},{"desc":"274","fix":"285"},{"desc":"274","fix":"286"},"Update the dependencies array to be: [checkCurrentUser]",{"range":"287","text":"288"},{"range":"289","text":"288"},{"range":"290","text":"288"},{"range":"291","text":"288"},"Update the dependencies array to be: [url, volume]",{"range":"292","text":"293"},{"range":"294","text":"288"},{"range":"295","text":"288"},{"range":"296","text":"288"},{"range":"297","text":"288"},{"range":"298","text":"288"},{"range":"299","text":"288"},[500,502],"[checkCurrentUser]",[1319,1321],[882,884],[884,886],[1636,1641],"[url, volume]",[659,661],[696,698],[1076,1078],[1216,1218],[886,888],[693,695]]